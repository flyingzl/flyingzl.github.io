<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>聊聊WebTransport</title>
      <link href="/2021/02/03/liao-liao-webtransport/"/>
      <url>/2021/02/03/liao-liao-webtransport/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="WebTransport-是什么？"><a href="#WebTransport-是什么？" class="headerlink" title="WebTransport 是什么？"></a>WebTransport 是什么？</h3><p><a href="https://w3c.github.io/webtransport/">WebTransport</a>是浏览器提供的一套基于<a href="https://tools.ietf.org/html/draft-ietf-quic-transport-34">QUIC</a>协议的 API 接口，方便浏览器和服务器之间进行实时数据传输，它填补了 Web 平台中的一些空白：</p><ul><li>  缺少类似 UDP 的网络 API</li><li>  缺少类似于 WebSocket 但不受队头阻塞影响（Head of Line Blocking）的 API</li></ul><h3 id="WebTransport-特性"><a href="#WebTransport-特性" class="headerlink" title="WebTransport 特性"></a>WebTransport 特性</h3><p>Webtransport 基于 QUIC 协议，其底层是 UDP。虽然是 UDP 是不可靠的传输协议，但是 QUIC 在 UDP 的基础上融合了 TCP、TLS、HTTP/2 等协议的特性，使得 QUIC 成为一种低时延、安全可靠的传输协议。可以简单理解 QUIC 把 TCP+TLS 的功能基于 UDP 重新实现了一遍。</p><p>WebTransport 提供了如下功能特性：</p><ul><li>  传输可靠数据流 （类似 TCP）</li><li>  传输不可靠数据流（类似 UDP）</li><li>  数据加密和拥塞控制（congestion control）</li><li>  基于 Origin 的安全模型（校验请求方是否在白名单内，类似于 CORS 的<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Origin">Access-Control-Allow-Origin</a>）</li><li>  支持多路复用（类似于 HTTP2 的 Stream）</li></ul><span id="more"></span><h3 id="WebTransport-适用场景"><a href="#WebTransport-适用场景" class="headerlink" title="WebTransport 适用场景"></a>WebTransport 适用场景</h3><ul><li>  不考虑数据传输可靠性和数据到达到顺序的场景，比如游戏中向 服务器 发送 游戏状态 数据</li><li>  服务器消息推送</li><li>  其它不考虑数据达到顺序的场景</li></ul><h2 id="API-使用"><a href="#API-使用" class="headerlink" title="API 使用"></a>API 使用</h2><p>WebTransport 主要提供三种类型的 API</p><ul><li>  <code>datagramReadable</code>和<code>datagramWritable</code>，用于不可靠数据传输</li><li>  <code>createBidirectionalStream</code>, 用于双向数据流可靠传输</li><li>  <code>createUnidirectionalStream</code>, 用于单向数据流可靠传输</li></ul><h3 id="创建-WebTransport-对象"><a href="#创建-WebTransport-对象" class="headerlink" title="创建 WebTransport 对象"></a>创建 WebTransport 对象</h3><p>创建 WebTransport 对象，有一定的 URI 要求，格式为: <code>quic-transport://domain:port/path</code>，如下所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> transport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebTransport</span><span class="token punctuation">(</span><span class="token string">'quic-transport://localhost:4433/counter'</span><span class="token punctuation">)</span><span class="token keyword">await</span> transport<span class="token punctuation">.</span>readytransport<span class="token punctuation">.</span>closed<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'webtransport closed'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>transport.ready</code>返回一个 Promise，如果 QUIC 连接失败会报错。</p><p><code>transport.closed</code>也返回一个 Promise，QUIC 连接关闭时会执行</p><p>使用 WebTransport 时需要创建一个 QUIC Server， 可以基于 Python 库<a href="https://github.com/aiortc/aioquic">aioquic</a>来创建服务器，也可以直接使用 Google Chrome 的<a href="https://github.com/GoogleChrome/samples/blob/gh-pages/quictransport/quic_transport_server.py">样例代码</a>。</p><h3 id="不可靠数据数传"><a href="#不可靠数据数传" class="headerlink" title="不可靠数据数传"></a>不可靠数据数传</h3><p>WebTransport 提供了类似于 UDP 的不可靠传输接口，分别为<code>datagramReadable</code>和<code>datagramWritable</code>。前者用于读取数据，后者用于发送数据。完整的样例如下所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> transport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebTransport</span><span class="token punctuation">(</span>        <span class="token string">'quic-transport://localhost:4433/counter'</span>    <span class="token punctuation">)</span>    <span class="token keyword">await</span> transport<span class="token punctuation">.</span>ready    transport<span class="token punctuation">.</span>closed<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'webtransport closed'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">createUdpWriter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> datagramWritable <span class="token operator">=</span> transport<span class="token punctuation">.</span>datagramWritable        <span class="token keyword">if</span> <span class="token punctuation">(</span>datagramWritable<span class="token punctuation">.</span>locked<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'previous datagram writer should be relased'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> datagramWritable<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> <span class="token function-variable function">createUdpReader</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> datagramReadable <span class="token operator">=</span> transport<span class="token punctuation">.</span>datagramReadable        <span class="token keyword">if</span> <span class="token punctuation">(</span>datagramReadable<span class="token punctuation">.</span>locked<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'previous datagram reader should be relased'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> datagramReadable<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> udpReader <span class="token operator">=</span> <span class="token function">createUdpReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> udpReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'done, close datagram reader...'</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> updWriter <span class="token operator">=</span> <span class="token function">createUdpWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        updWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextEncoder</span><span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        <span class="token comment">// 关闭writer</span>        <span class="token keyword">await</span> updWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 释放锁</span>        updWriter<span class="token punctuation">.</span><span class="token function">releaseLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 关闭transport</span>        transport<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 上面代码中，核心代码为：<code>transport.datagramWritable.getWriter()</code>以及<code>transport.datagramReadable.getReader()</code>。</p><p><code>transport.datagramWritable.getWriter()</code>返回 一个 <a href="https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter">WritableStreamDefaultWriter</a>对象，其<code>write</code>方法用于 发送数据，注意数据必须为<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray">TypedArray</a>数据类型， 代码中我们用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TextEncoder">TextEncoder.encode()</a>将字符串转为了<code>Uint8Array</code></p><p><code>transport.datagramReadable.getReader() </code>返回一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStreamDefaultReader">ReadableStreamDefaultReader</a>对象，其<code>read</code>方法用于读取数据，代码中我们用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TextEncoder">TextEncoder.decode()</a>将<code>Uint8Array</code>类似数据转为了字符串。</p><h3 id="双向可靠数据流"><a href="#双向可靠数据流" class="headerlink" title="双向可靠数据流"></a>双向可靠数据流</h3><p>如果需要保证可靠的数据传输并且需要返回实时结果，可以通过<code>transport.createBidirectionalStream()</code>来创建可靠数据传输。这个接口的功能类似于 WebSocket，但优点在于不受对头阻塞影响。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> transport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebTransport</span><span class="token punctuation">(</span>        <span class="token string">'quic-transport://localhost:4433/counter'</span>    <span class="token punctuation">)</span>    <span class="token keyword">await</span> transport<span class="token punctuation">.</span>ready    transport<span class="token punctuation">.</span>closed<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'webtransport closed'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    window<span class="token punctuation">.</span>transport <span class="token operator">=</span> transport    <span class="token keyword">const</span> <span class="token function-variable function">readerStream</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">reader</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">await</span> transport<span class="token punctuation">.</span><span class="token function">createBidirectionalStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">let</span> decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextDecoderStream</span><span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>            <span class="token keyword">let</span> reader <span class="token operator">=</span> stream<span class="token punctuation">.</span>readable<span class="token punctuation">.</span><span class="token function">pipeThrough</span><span class="token punctuation">(</span>decoder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">readerStream</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span>            <span class="token keyword">const</span> writer <span class="token operator">=</span> stream<span class="token punctuation">.</span>writable<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextEncoder</span><span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">await</span> writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        <span class="token comment">// transport.close()</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意发送可靠数据流时和 <code>transport.datagramWritable</code>有所不同，每次发送数据，都需要创建一个<code>transport.createBidirectionalStream()</code>对象，发送完毕后需要调用<code>close()</code>将其关闭。</p><p>这个就是就是多路复用，可以非常高效、低成本的同时创建多个 Stream，而且多个 Stream 之间相互独立，不像 HTTP2 那样受对头阻塞的影响。</p><p><code>transport.createBidirectionalStream()</code>返回一个<code>Promise&lt;BidirectionalStream&gt;</code>, <code>BidirectionalStream</code>拥有<code>readable</code>和<code>writable</code>对象，分别用于可靠的发送数据和接受数据。</p><h3 id="单向可靠数据流"><a href="#单向可靠数据流" class="headerlink" title="单向可靠数据流"></a>单向可靠数据流</h3><p>如果想保证数据可靠到达，但是对返回结果不感兴趣，可以使用<code>transport.createUnidirectionalStream()</code>时来创建单向数据流，它返回一个<code>SendStream</code>对象，只可以发送数据。如果想获取返回的数据，可以调用<code>transport.transport.incomingUnidirectionalStreams</code>来获取，但是数据顺序就不保证了。一个完整的样例如下所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> transport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebTransport</span><span class="token punctuation">(</span>        <span class="token string">'quic-transport://localhost:4433/counter'</span>    <span class="token punctuation">)</span>    <span class="token keyword">await</span> transport<span class="token punctuation">.</span>ready    transport<span class="token punctuation">.</span>closed<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'webtransport closed'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    window<span class="token punctuation">.</span>transport <span class="token operator">=</span> transport    <span class="token keyword">const</span> <span class="token function-variable function">readIncomingStream</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> reader <span class="token operator">=</span> transport<span class="token punctuation">.</span>incomingUnidirectionalStreams<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'incoming stream done...'</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            <span class="token function">readerStream</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> <span class="token function-variable function">readerStream</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> reader <span class="token operator">=</span> stream<span class="token punctuation">.</span>readable<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextDecoder</span><span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">readIncomingStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 创建单向数据流</span>            <span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">await</span> transport<span class="token punctuation">.</span><span class="token function">createUnidirectionalStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">const</span> writer <span class="token operator">=</span> stream<span class="token punctuation">.</span>writable<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextEncoder</span><span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">await</span> writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        <span class="token comment">// transport.close()</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>WebTransport 提供的三种 API 可以根据实际情况来使用：</p><ol><li>不需要保证数据发送先后顺序，就选择<code>transport.datagramWritable</code></li><li>需要保证数据发送顺序，但是不关心返回值，可以选择<code>transport.createUnidirectionalStream()</code></li><li>需要保证数据发送顺序且关心返回结果，就选择<code>transport.createBidirectionalStream()</code></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>WebTransport 现在只有 Google Chrome 支持，其标准也处于草案阶段，不建议使用生产环境。而且现阶段处于<a href="https://web.dev/webtransport/#register-for-ot">origin trial</a>，也就是说，必须申请试用才可以使用。例如官方样例<a href="https://googlechrome.github.io/samples/webtransport/client.html">https://googlechrome.github.io/samples/webtransport/client.html</a>就有类似的代码：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- QuicTransport origin trial token. See https://developers.chrome.com/origintrials/#/view_trial/-6744140441987317759 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>origin-trial<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AtxDQl4geYcHaq74wzqCV5DB6zr3+aOffkteLTTLu1+S7VJPwCiUHe2qyUh8kcez+UnKg+g79wzkhdgWvtShmAgAAABdeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZWNocm9tZS5naXRodWIuaW86NDQzIiwiZmVhdHVyZSI6IlF1aWNUcmFuc3BvcnQiLCJleHBpcnkiOjE2MTQxMjQ3OTl9<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>浏览器检测到<code>origin-trial</code>才开启 WebTransport 功能。</p><p>如果向自己玩耍 WebTransport，可以通过<a href="https://github.com/FiloSottile/mkcert">mkcert</a>生成下 HTTPS 证书，然后在 Google Chrome 时加上自定参数，例如 Mac 下启动 Google Chrome 需要加上如下类似代码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">open</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-a</span> /Applications/Google<span class="token punctuation">\</span> Chrome.app/Contents/MacOS/Google<span class="token punctuation">\</span> Chrome <span class="token parameter variable">--args</span> --origin-to-force-quic-on<span class="token operator">=</span>localhost:4433 https://googlechrome.github.io/samples/webtransport/client.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体代码可以参考<a href="https://github.com/GoogleChrome/samples/blob/gh-pages/quictransport/quic_transport_server.py">https://github.com/GoogleChrome/samples/blob/gh-pages/quictransport/quic_transport_server.py</a>.</p><p>以Mac为例子，在命令行依此执行如下代码，就可以启动一个 QUIC Server。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> mkcertmkcert <span class="token parameter variable">-install</span>mkcert localhostpython quic_transport_server.py localhost.pem localhost-key.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>  <a href="https://github.com/w3c/webtransport/blob/main/explainer.md">WebTransport explainer</a></li><li>  <a href="https://web.dev/webtransport/">Experimenting with WebTransport</a></li><li>  <a href="https://centrifugal.github.io/centrifugo/blog/quic_web_transport/">Experimenting with QUIC and WebTransport in Go</a></li><li>  <a href="https://web.dev/how-to-use-local-https/">How to use HTTPS for local development</a></li><li>  <a href="https://zhuanlan.zhihu.com/p/32630510">让互联网更快的“快”—QUIC 协议原理分析</a></li><li>  <a href="https://cloud.tencent.com/developer/article/1155289">天下武功，唯’QUICK’不破，揭秘 QUIC 的五大特性及外网表现</a></li><li>  <a href="https://zhuanlan.zhihu.com/p/60999430">QUIC 协议设计要点分析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker使用简易指南</title>
      <link href="/2020/12/11/docker-shi-yong-jian-yi-zhi-nan/"/>
      <url>/2020/12/11/docker-shi-yong-jian-yi-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-是什么？"><a href="#Docker-是什么？" class="headerlink" title="Docker 是什么？"></a>Docker 是什么？</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>Docker</strong> 是一个基于Go语言开发的应用容器引擎，它遵循了Apache2.0协议开源。<strong>Docker</strong>可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux服务器，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类iPhone的app），并且容器开销极其低。</p><h3 id="同类技术"><a href="#同类技术" class="headerlink" title="同类技术"></a>同类技术</h3><p>开源的VirtualBox、QEMU(quick emulator)、KVM, 商业VMware、 Parallels desktop</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><img src="https://g.asyncoder.com/images/20201210135256-v2-0327d6666507f8716c3d3630fa4cb671_r.jpg" alt="技术对比"></p><p>Docker容器可以在Mac/Windows/Linux等主机上运行，并与其他容器共享主机的内核，它运行的一个独立的进程，不占用其他任何可执行文件的内存，非常轻量。Docker镜像一般都是MB级别。</p><p>虚拟机运行的是一个完成的操作系统，通过虚拟机管理程序对主机资源进行虚拟访问，相比之下需要的资源更多，虚拟机镜像都是GB级别。</p><p>当然虚拟机的隔离性更好 ，因为它完全虚拟了一个操作系统，在隔离性特别高的场景下，用虚拟机更为合适，比如一个我们买的VPS，都是一个虚拟机。</p><h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h2><p><img src="https://g.asyncoder.com/images/20201211155705-engine-components-flow.png" alt="Docker Engine Components Flow"></p><p><img src="https://g.asyncoder.com/images/20201210140553-docker-arch1.jpg" alt="img"></p><p>Docker 是一个 C/S 模式的架构，后端是一个松耦合架构，模块各司其职。</p><ol><li>用户是使用 Docker Client 与 Docker Daemon 建立通信，并发送请求给后者。</li><li>Docker Daemon 作为 Docker 架构中的主体部分，首先提供 Docker Server 的功能使其可以接受 Docker Client 的请求。</li><li>Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式的存在。</li><li>Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graphdriver 将下载镜像以 Graph 的形式存储。</li><li>当需要为 Docker 创建网络环境时，通过网络管理驱动 Networkdriver 创建并配置 Docker容器网络环境。</li><li>当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Execdriver 来完成。</li><li>Libcontainer 是一项独立的容器管理包，Networkdriver 以及 Execdriver 都是通过 Libcontainer 来实现具体对容器进行的操作。</li></ol><h2 id="一些术语"><a href="#一些术语" class="headerlink" title="一些术语"></a>一些术语</h2><p>Docker 包括三个基本概念:</p><ul><li><strong>镜像（Image）</strong>：相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu 16.04 最小系统的 root 文件系统。</li><li><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是<strong>面向对象程序设计中的类和实例一样</strong>，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li><li><strong>仓库（Repository）</strong>：仓库可看成一个代码控制中心，用来保存镜像，类似于npm的registry，用户可以 上传自己制作好的镜像。</li></ul><p><img src="https://g.asyncoder.com/images/20201210141206-576507-docker1.png" alt="img"></p><h2 id="为什么会出现"><a href="#为什么会出现" class="headerlink" title="为什么会出现"></a>为什么会出现</h2><h3 id="解决什么问题"><a href="#解决什么问题" class="headerlink" title="解决什么问题"></a>解决什么问题</h3><ul><li>Docker解决了运行环境和配置问题，方便发布，方便做持续集成，完美解决【在我的电脑上能跑，在XX环境就跑步了】的情况</li><li>更轻量的虚拟化，节省了虚拟机的性能损耗</li></ul><h3 id="没这个技术之前怎么作"><a href="#没这个技术之前怎么作" class="headerlink" title="没这个技术之前怎么作"></a>没这个技术之前怎么作</h3><p>没使用Docker之前，用户会直接使用虚拟机部署来解决，这样导致：</p><ul><li>资源利用效率低</li><li>单物理机多应用无法有效隔离</li><li>运维部署不方便</li><li>测试、版本管理复杂</li><li>传统虚拟机占用空间大、启动慢、管理复杂</li></ul><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><h3 id="Docker-环境安装"><a href="#Docker-环境安装" class="headerlink" title="Docker 环境安装"></a>Docker 环境安装</h3><p><a href="https://desktop.docker.com/mac/stable/Docker.dmg">Docker Desktop for Mac</a></p><p><a href="https://desktop.docker.com/win/stable/Docker%20Desktop%20Installer.exe">Docker Desktop for Windows</a></p><p><img src="https://g.asyncoder.com/images/20201210142316-image-20201210142314530.png" alt="image-20201210142314530"></p><p>为了加快镜像拉取速度，需要修改下<code>Docker Engine</code>的镜像地址：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"debug"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"experimental"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"registry-mirrors"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token string">"https://75r8zlet.mirror.aliyuncs.com"</span><span class="token punctuation">,</span>        <span class="token string">"http://hub-mirror.c.163.com/"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Docker运行过程"><a href="#Docker运行过程" class="headerlink" title="Docker运行过程"></a>Docker运行过程</h3><p>Docker的运行过程可以简单的理解为，从远端仓库中拉取合适的镜像到本地–&gt;通过镜像创建容器–&gt;启动容器                                                                </p><p><img src="https://g.asyncoder.com/images/20201210173546-image-20201210173545494.png" alt="image-20201210173545494"></p><h2 id="Docker-容器使用"><a href="#Docker-容器使用" class="headerlink" title="Docker 容器使用"></a>Docker 容器使用</h2><h3 id="Hello-World运行"><a href="#Hello-World运行" class="headerlink" title="Hello World运行"></a>Hello World运行</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">➜  <span class="token function">docker</span> run <span class="token parameter variable">--rm</span> hello-worldUnable to <span class="token function">find</span> image <span class="token string">'hello-world:latest'</span> locallylatest: Pulling from library/hello-world0e03bdcc26d7: Pulling fs layerlatest: Pulling from library/hello-world0e03bdcc26d7: Pull completeDigest: sha256:e7c70bb24b462baa86c102610182e3efcb12a04854e8c582838d92970a09f323Status: Downloaded newer image <span class="token keyword">for</span> hello-world:latestHello from Docker<span class="token operator">!</span>This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: <span class="token number">1</span>. The Docker client contacted the Docker daemon. <span class="token number">2</span>. The Docker daemon pulled the <span class="token string">"hello-world"</span> image from the Docker Hub.    <span class="token punctuation">(</span>amd64<span class="token punctuation">)</span> <span class="token number">3</span>. The Docker daemon created a new container from that image <span class="token function">which</span> runs the    executable that produces the output you are currently reading. <span class="token number">4</span>. The Docker daemon streamed that output to the Docker client, <span class="token function">which</span> sent it    to your terminal.To try something <span class="token function">more</span> ambitious, you can run an Ubuntu container with: $ <span class="token function">docker</span> run <span class="token parameter variable">-it</span> ubuntu <span class="token function">bash</span>Share images, automate workflows, and <span class="token function">more</span> with a <span class="token function">free</span> Docker ID: https://hub.docker.com/For <span class="token function">more</span> examples and ideas, visit: https://docs.docker.com/get-started/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><p><code>docker images</code>用于查看本地已拉取 镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">➜  ~ <span class="token function">docker</span> imagesREPOSITORY                 TAG                 IMAGE ID            CREATED             SIZEflyingzl/mrtc-server       v2                  b7fa95c740d8        <span class="token number">21</span> hours ago        218MBflyingzl/invoice-ocr       latest              b5354990d5d4        <span class="token number">5</span> days ago          <span class="token number">8</span>.35MB<span class="token function">node</span>                       latest              2d840844f8e7        <span class="token number">2</span> weeks ago         935MB<span class="token function">node</span>                       lts-alpine3.12      870de9c16886        <span class="token number">3</span> weeks ago         117MBelectronuserland/builder   wine                2b534717a8c8        <span class="token number">4</span> months ago        <span class="token number">1</span>.88GBmysql                      latest              e3fcc9e1cc04        <span class="token number">4</span> months ago        544MBnginx                      latest              8cf1bfb43ff5        <span class="token number">4</span> months ago        132MBmongo                      latest              6d11486a97a7        <span class="token number">5</span> months ago        388MBalfg/nginx-rtmp            latest              db65d3c185cf        <span class="token number">7</span> months ago        115MBkagamihi/ffmpeg.js         latest              09fd1823daed        <span class="token number">7</span> months ago        <span class="token number">1</span>.38GB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><p><code>docker run</code>用于创建一个容器，容器创建成功后，会返回一个container ID, 通过改ID可以对容器进行停止、更新 或者删除操作。</p><p><code>docker run -i -d --name node-demo node</code>可以生成一个名为<code>node-demo</code>的容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> ~ <span class="token function">docker</span> run <span class="token parameter variable">-i</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> node-demo <span class="token function">node</span>1f396e48e47c8c5fd6ee6851ff5436317c92258dbc92bda67ca4b5a24e0442cd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行<code>docker ps</code>可以看到当前正在运行的容器</p><p> <img src="https://g.asyncoder.com/images/20201210153733-image-20201210153731282.png" alt="image-20201210153731282"></p><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p>执行<code>docker exec -it container-id bash</code>可以进入容器 内部</p><p>这里<code>-i</code>打表<code>interactive</code>,表示可交互， <code>-t</code>表示<code>tty</code>，模拟一个伪终端。<code>-i</code>和<code>-t</code>一般是配合使用</p><p><img src="https://g.asyncoder.com/images/20201210154028-image-20201210154026575.png" alt="image-20201210154026575"></p><p>可以 看到， 容器其实就是一个Linux运行环境</p><h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><p>默认情况下，容器和宿主机的网络是不通的，例如我在上文创建的容器中安装一个<code>http-server</code>,然后执行<code>http-server -p 3000</code>,在外部是没法访问的。</p><p><img src="https://g.asyncoder.com/images/20201210154315-image-20201210154314535.png" alt="image-20201210154314535"></p><p>通过<code>docker run  -i -d --name node-demo-port -p 3000:3000 node</code> 可以将本地的3000端口 和容器的3000端口进行映射， 这样就可以访问到容器</p><p><img src="https://g.asyncoder.com/images/20201210160252-image-20201210160250881.png" alt="image-20201210160250881"></p><p>如果想查看容器的端口映射情况，可以运行<code>docker port container-id</code>来进行查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">➜  ~ <span class="token function">docker</span> port ubuntu<span class="token number">5900</span>/tcp -<span class="token operator">&gt;</span> <span class="token number">0.0</span>.0.0:5900<span class="token number">80</span>/tcp -<span class="token operator">&gt;</span> <span class="token number">0.0</span>.0.0:6080➜  ~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><p><code>docker stop container-id/container-name</code>可以停止容器</p><p><code>docker stop $(docker ps -aq)</code>可以量停止所有容器</p><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p><code>docker start container-id/container-name</code>可以启动之前停止的 容器</p><p><code>docker start $(docker ps -aq)</code>可以量启动之前所有停止的容器</p><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p><code>docker rm container-id/container-name</code>可以停止容器</p><p><code>docker rm $(docker ps -aq)</code>可以删除所有容器</p><blockquote><p><em>如果某个容器正在运行中</em>，删除容器时会提示错误<code>Error response from daemon: You cannot remove a running container XXXXX. Stop the container before attempting removal or force remove</code></p></blockquote><p>如果想强制删除，可以执行<code>docker rm -f container-id</code></p><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><p>使用某个容器后，如果进入容器后安装了新的软件或者增加新的功能，可以基于修改后的容器新建一个镜像，比如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建容器 </span><span class="token function">docker</span> run <span class="token parameter variable">-id</span> <span class="token parameter variable">--name</span> node-demo <span class="token function">node</span><span class="token comment"># 进入容器</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> node-demo <span class="token function">bash</span><span class="token comment"># 安装一些新的软件, 更新下载镜像源</span>root@688e8e176515:/<span class="token comment"># apt-get update</span>root@688e8e176515:/<span class="token comment"># apt-get install apt-transport-https</span>root@688e8e176515:/<span class="token comment"># sed -i 's#http://deb.debian.org#https://mirrors.163.com#g' /etc/apt/sources.list</span>root@688e8e176515:/<span class="token comment"># apt-get  update</span>root@688e8e176515:/<span class="token comment"># apt-get install vim  -y</span>root@688e8e176515:/<span class="token comment"># npm  install http-server -g</span><span class="token comment"># 退出容器,将容器重新制作为一个镜像</span><span class="token function">docker</span> commit <span class="token parameter variable">-a</span> zhaolei <span class="token parameter variable">-m</span> <span class="token string">"docker with node and vim"</span> node-demo node-vim:latest<span class="token comment"># 重新创建容器</span><span class="token function">docker</span> run <span class="token parameter variable">-id</span> <span class="token parameter variable">--name</span> node-vim-demo node-vim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>镜像也可以从从外部导出导出，可以参考 <a href="https://www.hangge.com/blog/cache/detail_2411.html">Docker镜像导入导出</a>一文：</p><ul><li><code>docker export</code>、<code>docker import</code> </li><li><code>docker save</code>、<code>docker load</code></li></ul><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p><code>docker rmi image-id/image-name</code>可以删除镜像</p><p><code>docker rmi $(docker images -aq)</code>可以删除所有镜像</p><h3 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h3><p><code>docker cp local-file  conainer:container-path </code>复制宿主本地文件到容器</p><p><code>docker cp container:container-path local-file</code> 复制容器文件到宿主本地 </p><p><img src="https://g.asyncoder.com/images/20201210163240-image-20201210163239033.png" alt="image-20201210163239033"></p><h3 id="文件目录映射"><a href="#文件目录映射" class="headerlink" title="文件目录映射"></a>文件目录映射</h3><p>Docker可以将宿主机的某个目录 映射到 容器，这样宿主机对文件进行修改，容器可以 读取到；反之怡然。</p><p>可以增加<code>-v</code>参数即可。</p><p><img src="https://g.asyncoder.com/images/20201210164357-image-20201210164355778.png" alt="image-20201210164355778"></p><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><p><code>docker logs -f containerId</code> 用于查看容器日志</p><p><img src="https://g.asyncoder.com/images/20201210163644-image-20201210163642819.png" alt="image-20201210163642819"></p><h3 id="输出格式化"><a href="#输出格式化" class="headerlink" title="输出格式化"></a>输出格式化</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">--format</span> <span class="token string">"table {{.Names}}<span class="token entity" title="\t">\t</span>{{.Image}}<span class="token entity" title="\t">\t</span>{{.Status}}"</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">dps</span><span class="token operator">=</span><span class="token string">'docker ps -a --format "table {{.Names}}\t{{.Image}}\t{{.Status}}"'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://g.asyncoder.com/images/20201210163718-image-20201210163716443.png" alt="image-20201210163716443"></p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="发票识别"><a href="#发票识别" class="headerlink" title="发票识别"></a>发票识别</h3><p><code>docker run --rm -e USER=石头 -v ~/Downloads/images/:/opt/invoice/images flyingzl/invoice-ocr</code> 用于直接识别图片。</p><p><code>~/Downloads/images</code>表示本地存放发票图片的路径，根据本机图片目录进行修改</p><p><code>USER</code>用于修改 输出结果的显示名称</p><p><img src="https://g.asyncoder.com/images/20201210164530-image-20201210164529246.png" alt="image-20201210164529246"></p><h3 id="基于Nginx的RTMP推流"><a href="#基于Nginx的RTMP推流" class="headerlink" title="基于Nginx的RTMP推流"></a>基于Nginx的RTMP推流</h3><ol><li><p><code>docker run --rm -itd -p 1935:1935 -p 8080:80 alfg/nginx-rtmp</code> 拉取并运行容器</p></li><li><p><code>ffmpeg -re -stream_loop -1 -i ~/Movies/霸王龙.mp4 -f flv 表示rtmp://127.0.0.1:1935/stream/demo</code>进行 视频循环推流， <code>demo</code>表示流名称 </p></li><li><p><code>ffplay http://127.0.0.1:8080/live/demo.m3u8</code>可以 播放HLS视频流</p></li></ol><p><img src="https://g.asyncoder.com/images/20201210165554-image-20201210165552582.png" alt="image-20201210165552582"></p><h3 id="Mac上构建Electron-Windows应用"><a href="#Mac上构建Electron-Windows应用" class="headerlink" title="Mac上构建Electron Windows应用"></a>Mac上构建Electron Windows应用</h3><p>由于Mac上通过<code>electron-builder</code>来生成windows应用， 需要本机安装<code>wine</code>来模拟环境，比较麻烦，而且污染系统。可以考虑通过一个名为<a href="https://hub.docker.com/r/electronuserland/builder/">electronuserland/builder</a>的Docker镜像来进行快速构建</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> electron<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token punctuation">\</span><span class="token parameter variable">--env</span> <span class="token assign-left variable">ELECTRON_MIRROR</span><span class="token operator">=</span><span class="token string">"https://npm.taobao.org/mirrors/electron/"</span> <span class="token punctuation">\</span><span class="token parameter variable">--env</span> <span class="token assign-left variable">ELECTRON_CACHE</span><span class="token operator">=</span><span class="token string">"/root/.cache/electron"</span> <span class="token punctuation">\</span><span class="token parameter variable">--env</span> <span class="token assign-left variable">ELECTRON_BUILDER_CACHE</span><span class="token operator">=</span><span class="token string">"/root/.cache/electron-builder"</span> <span class="token punctuation">\</span><span class="token parameter variable">-v</span> <span class="token variable">${<span class="token environment constant">PWD</span>}</span>:/project <span class="token punctuation">\</span><span class="token parameter variable">-v</span> <span class="token variable">${<span class="token environment constant">PWD</span><span class="token operator">##</span>*<span class="token operator">/</span>}</span>-node-modules:/project/node_modules <span class="token punctuation">\</span><span class="token parameter variable">-v</span> ~/.cache/electron:/root/.cache/electron <span class="token punctuation">\</span><span class="token parameter variable">-v</span> ~/.cache/electron-builder:/root/.cache/electron-builder <span class="token punctuation">\</span>electronuserland/builder:wine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装好依赖，就 可以进行构建 windows应用了。</p><h3 id="可视化管理Docker"><a href="#可视化管理Docker" class="headerlink" title="可视化管理Docker"></a>可视化管理Docker</h3><p>可以运行安装<code>portainer/portainer-ce</code>镜像对docker进行可视化管理。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> volume create portainer_data<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9000</span>:9000 <span class="token parameter variable">--name</span><span class="token operator">=</span>portainer <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token parameter variable">-v</span> portainer_data:/data portainer/portainer-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://g.asyncoder.com/images/20201210175415-image-20201210175414519.png" alt="image-20201210175414519"></p><h3 id="创建本地镜像"><a href="#创建本地镜像" class="headerlink" title="创建本地镜像"></a>创建本地镜像</h3><p>创建本地镜像需要事先生成一个<code>Dockerfile</code>文件，然后 执行输入类似下面的内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM node:lts-alpine3.12RUN <span class="token builtin class-name">echo</span> <span class="token string">"http://mirrors.aliyun.com/alpine/v3.12/main/"</span> <span class="token operator">&gt;</span> /etc/apk/repositoriesLABEL <span class="token assign-left variable">maintainer</span><span class="token operator">=</span><span class="token string">"flyingzl"</span>RUN apk update <span class="token punctuation">\</span>        <span class="token operator">&amp;&amp;</span> apk upgrade <span class="token punctuation">\</span>        <span class="token operator">&amp;&amp;</span> apk <span class="token function">add</span> --no-cache <span class="token function">bash</span> <span class="token punctuation">\</span>        bash-doc <span class="token punctuation">\</span>        bash-completion <span class="token punctuation">\</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/cache/apk/* <span class="token punctuation">\</span>        <span class="token operator">&amp;&amp;</span> /bin/bashRUN <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/node/app/node_modulesWORKDIR /home/node/appCOPY package*.json ./COPY <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span>RUN <span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org/RUN <span class="token function">npm</span> <span class="token function">install</span>RUN <span class="token function">npm</span> rum buildEXPOSE <span class="token number">8080</span>CMD <span class="token punctuation">[</span><span class="token string">"node"</span>, <span class="token string">"dist/bin/server.js"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Dockfile</code>的使用 可以参考 <a href="https://www.runoob.com/docker/docker-dockerfile.html">https://www.runoob.com/docker/docker-dockerfile.html</a></p><p>运行<code>docker docker build -t flyingzl/mrtc-server:v2 .</code>可以 生成一个本地镜像</p><p><img src="https://g.asyncoder.com/images/20201210172605-image-20201210172604018.png" alt="image-20201210172604018"></p><p><img src="https://g.asyncoder.com/images/20201210172806-image-20201210172805229.png" alt="image-20201210172805229"></p><h3 id="通过API和-SDK来获取Docker信息"><a href="#通过API和-SDK来获取Docker信息" class="headerlink" title="通过API和 SDK来获取Docker信息"></a>通过API和 SDK来获取Docker信息</h3><p>Docker提供了<a href="https://docs.docker.com/engine/api/">API</a>来访问访问 ，可以通过 REST API或者第三方SDK来访问</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~ <span class="token function">curl</span> --unix-socket /var/run/docker.sock http://v1.40/containers/json <span class="token operator">|</span> jq <span class="token string">'[.[] | {name: .Names, image: .Image, status: .Status}]'</span><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>      <span class="token string">"/node-vim-demo"</span>    <span class="token punctuation">]</span>,    <span class="token string">"image"</span><span class="token builtin class-name">:</span> <span class="token string">"node-vim"</span>,    <span class="token string">"status"</span><span class="token builtin class-name">:</span> <span class="token string">"Up 41 minutes"</span>  <span class="token punctuation">}</span>,  <span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>      <span class="token string">"/portainer"</span>    <span class="token punctuation">]</span>,    <span class="token string">"image"</span><span class="token builtin class-name">:</span> <span class="token string">"portainer/portainer-ce"</span>,    <span class="token string">"status"</span><span class="token builtin class-name">:</span> <span class="token string">"Up 17 hours"</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者在Node.js上 使用 <a href="https://github.com/apocas/dockerode">dockerode</a>来进行访问</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Docker <span class="token keyword">from</span> <span class="token string">'dockerode'</span><span class="token keyword">const</span> docker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Docker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 获取Docker版本信息</span>docker<span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">docker version: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>v<span class="token punctuation">.</span>Version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 获取当前正在运行的容器</span>docker<span class="token punctuation">.</span><span class="token function">listContainers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">containers</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    containers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">container</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>container<span class="token punctuation">.</span>Names<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\t</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>container<span class="token punctuation">.</span>Image<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\t</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>container<span class="token punctuation">.</span>Status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651562919&amp;idx=1&amp;sn=e104ff4e6d1f4ea88f419244bb9da608&amp;chksm=80257466b752fd70be127c910e1d7ef8e36b573e9e4a96f3371d4f890c6e49b9e53699b9c59c&amp;mpshare=1&amp;scene=1&amp;srcid=1210YXwNWCaNxeGwtYT0NEhX&amp;sharer_sharetime=1607592691939&amp;sharer_shareid=281b99e11b10b50250f9d04de224f74d#rd">谁说前端不用懂，手摸手 Docker 从入门到实践</a></p><p><a href="https://juejin.cn/post/6844904117165359111">小白学习docker只要这篇文章就够了</a></p><p><a href="https://www.runoob.com/docker/docker-tutorial.html">Docker 教程</a></p><p><a href="https://www.zhihu.com/question/48174633">docker容器与虚拟机有什么区别？</a></p><p><a href="https://www.hangge.com/blog/cache/detail_2411.html">Docker镜像导入导出</a></p><p><a href="https://docs.docker.com/engine/reference/builder/">Dockfile Reference</a></p><p><a href="https://yeqing.run/202005/docker-vnc-desktop.html">Docker运行Unbuntu桌面</a></p>]]></content>
      
      
      <categories>
          
          <category> 系统软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron开发小结</title>
      <link href="/2020/09/11/electron-kai-fa-xiao-jie/"/>
      <url>/2020/09/11/electron-kai-fa-xiao-jie/</url>
      
        <content type="html"><![CDATA[<p>最近基于Electron开发了一个音视频应用，遇到了一些坑，特此记录下，希望可以帮助后续的同学。</p><h2 id="Electron下载慢"><a href="#Electron下载慢" class="headerlink" title="Electron下载慢"></a>Electron下载慢</h2><p>安装<code>electron</code>时会自动最新的Electron二进制文件，由于文件比较大还容易墙，所以我们可以先配置好环境变量，再运行<code>yarn</code>或者<code>npm install</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ELECTRON_MIRROR</span><span class="token operator">=</span><span class="token string">"https://npm.taobao.org/mirrors/electron/"</span><span class="token function">yarn</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>ELECTRON_MIRROR</code>表示<code>Electron</code>镜像地址，切换到国内淘宝源，速度会飞快 </p><h2 id="Electron-截图"><a href="#Electron-截图" class="headerlink" title="Electron 截图"></a>Electron 截图</h2><p>Electron里面其实有专门的截屏函数<a href="https://www.electronjs.org/docs/api/web-contents#contentscapturepagerect">capturePage</a>, 但必须在主进程进行调用，可以在渲染进程通过<a href="https://www.electronjs.org/docs/api/remote">remote</a>模快来调用，如下所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> takeScreenshot <span class="token operator">=</span> <span class="token punctuation">(</span> savedFolderName <span class="token operator">=</span> <span class="token string">'screenShoots'</span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> isNative <span class="token operator">=</span> <span class="token keyword">typeof</span> require <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isNative<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>            <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span> remote <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span>            <span class="token keyword">const</span> screenshotsDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">HOME</span> <span class="token operator">||</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">USERPROFILE</span><span class="token punctuation">,</span> savedFolderName<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>screenshotsDir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span>screenshotsDir<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            remote<span class="token punctuation">.</span><span class="token function">getCurrentWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">capturePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">img</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> name <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>screenshotsDir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token punctuation">.</span>sep<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.png</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> img<span class="token punctuation">.</span><span class="token function">toPNG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token function">resolve</span><span class="token punctuation">(</span>screenshotsDir<span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'should be invoked in electron environment'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Electron-桌面分享"><a href="#Electron-桌面分享" class="headerlink" title="Electron 桌面分享"></a>Electron 桌面分享</h2><p>大家知道，在Google Chrome中可以调用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaDevices/getDisplayMedia">MediaDevices.getDisplayMedia()</a>来进行分享，不过很可惜， <code>Electron</code>没法使用该方法，具体issues可以参考 <a href="https://github.com/electron/electron/issues/16513">getDisplayMedia with Chrome 72 throwing Not Allowed</a>。不过<code>Electron</code>中提供了<a href="https://www.electronjs.org/docs/api/desktop-capturer">desktopCapturer</a>来获取桌面视频流，这样也可以进行屏幕共享。</p><p>为了保证代码兼容性，并且在<code>Electron</code>进行屏幕分享，我们可以重写<code>window.navigator.mediaDevices</code>方法，保证代码无缝迁移。代码放在<code>preload.js</code>中即可。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> desktopCapturer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>mediaDevices <span class="token operator">=</span> window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>mediaDevices <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>mediaDevices<span class="token punctuation">.</span><span class="token function-variable function">getDisplayMedia</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 获取所有可以分享的桌面或者窗口</span>    <span class="token keyword">const</span> sources <span class="token operator">=</span> <span class="token keyword">await</span> desktopCapturer<span class="token punctuation">.</span><span class="token function">getSources</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">types</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'screen'</span><span class="token punctuation">,</span> <span class="token string">'window'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">// 为了方便，我们只选择全屏进行分享</span>    <span class="token keyword">const</span> source <span class="token operator">=</span> sources<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">source</span> <span class="token operator">=&gt;</span> source<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'Entire Screen'</span> <span class="token operator">||</span> source<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'Electron'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">await</span> navigator<span class="token punctuation">.</span>mediaDevices<span class="token punctuation">.</span><span class="token function">getUserMedia</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token literal-property property">audio</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token literal-property property">video</span><span class="token operator">:</span> <span class="token punctuation">{</span>                  <span class="token literal-property property">mandatory</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token literal-property property">chromeMediaSource</span><span class="token operator">:</span> <span class="token string">'desktop'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">chromeMediaSourceId</span><span class="token operator">:</span> source<span class="token punctuation">.</span>id<span class="token punctuation">,</span>                    <span class="token literal-property property">minWidth</span><span class="token operator">:</span> <span class="token number">1280</span><span class="token punctuation">,</span>                    <span class="token literal-property property">maxWidth</span><span class="token operator">:</span> <span class="token number">1280</span><span class="token punctuation">,</span>                    <span class="token literal-property property">minHeight</span><span class="token operator">:</span> <span class="token number">720</span><span class="token punctuation">,</span>                    <span class="token literal-property property">maxHeight</span><span class="token operator">:</span> <span class="token number">720</span>                  <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> stream        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子只是进行全屏分享，如果想基于某个单独窗口分享，可以遍历<code>desktopCapturer.getSources({ types: ['screen', 'window'] })</code>返回的数据，弹出窗口，用户选择后进行分享。</p><h2 id="Electron-全屏"><a href="#Electron-全屏" class="headerlink" title="Electron 全屏"></a>Electron 全屏</h2><p>在网页中，我们可以通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/requestFullScreen">requestFullscreen</a>进入全屏，通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/exitFullscreen">Document.exitFullscreen</a>来退出全屏，不过在Electron，如果应用点击最大化按钮进入全屏后，上面的方法就失效了，我们可以在渲染进程中调用Electron的<a href="https://www.electronjs.org/docs/api/browser-window#winsetfullscreenflag">setFullScreen</a>方法来控制全屏进入和退出 ，如下代码所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> utils <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">isNative</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">typeof</span> require <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token function-variable function">toggleFullScreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">isNative</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> win <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>remote<span class="token punctuation">.</span><span class="token function">getCurrentWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 检测当前Electron是否为全屏状态</span>        <span class="token keyword">const</span> isFullScreen <span class="token operator">=</span>  win<span class="token punctuation">.</span>fullScreen        win<span class="token punctuation">.</span><span class="token function">setFullScreen</span><span class="token punctuation">(</span><span class="token operator">!</span>isFullScreen<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> isFullScreen <span class="token operator">=</span>  document<span class="token punctuation">.</span>webkitIsFullScreen        <span class="token keyword">if</span> <span class="token punctuation">(</span>isFullScreen<span class="token punctuation">)</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span><span class="token function">webkitExitFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">requestFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关闭应用"><a href="#关闭应用" class="headerlink" title="关闭应用"></a>关闭应用</h2><p>这个比较简单，直接调用Electron中的<a href="https://www.electronjs.org/docs/api/browser-window#winclose">close</a>方法即可。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">close</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    utils<span class="token punctuation">.</span><span class="token function">isNative</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>remote<span class="token punctuation">.</span><span class="token function">getCurrentWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="electron-builder-打包后，input输入框粘贴、剪切失效的问题"><a href="#electron-builder-打包后，input输入框粘贴、剪切失效的问题" class="headerlink" title="electron-builder 打包后，input输入框粘贴、剪切失效的问题"></a>electron-builder 打包后，input输入框粘贴、剪切失效的问题</h2><p>这个问题很奇怪，直接通过<code>electron src/main/index.js</code> 运行时不会存在该问题，但是通过 <a href="https://www.electron.build/">electron-builder</a> 构建后会存在该问题。我的Mac上就存在该问题。</p><p>解决方案有两个，第一个方案是给应用增加菜单，比如网上的解决方案：</p><p><a href="https://github.com/onmyway133/blog/issues/67">https://github.com/onmyway133/blog/issues/67</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span>app<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token keyword">const</span> Menu <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Menuapp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'ready'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">createMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">createMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> application <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"Application"</span><span class="token punctuation">,</span>    <span class="token literal-property property">submenu</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"About Application"</span><span class="token punctuation">,</span>        <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">"orderFrontStandardAboutPanel:"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"separator"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"Quit"</span><span class="token punctuation">,</span>        <span class="token literal-property property">accelerator</span><span class="token operator">:</span> <span class="token string">"Command+Q"</span><span class="token punctuation">,</span>        <span class="token function-variable function">click</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          app<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> edit <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"Edit"</span><span class="token punctuation">,</span>    <span class="token literal-property property">submenu</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"Undo"</span><span class="token punctuation">,</span>        <span class="token literal-property property">accelerator</span><span class="token operator">:</span> <span class="token string">"CmdOrCtrl+Z"</span><span class="token punctuation">,</span>        <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">"undo:"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"Redo"</span><span class="token punctuation">,</span>        <span class="token literal-property property">accelerator</span><span class="token operator">:</span> <span class="token string">"Shift+CmdOrCtrl+Z"</span><span class="token punctuation">,</span>        <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">"redo:"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"separator"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"Cut"</span><span class="token punctuation">,</span>        <span class="token literal-property property">accelerator</span><span class="token operator">:</span> <span class="token string">"CmdOrCtrl+X"</span><span class="token punctuation">,</span>        <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">"cut:"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"Copy"</span><span class="token punctuation">,</span>        <span class="token literal-property property">accelerator</span><span class="token operator">:</span> <span class="token string">"CmdOrCtrl+C"</span><span class="token punctuation">,</span>        <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">"copy:"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"Paste"</span><span class="token punctuation">,</span>        <span class="token literal-property property">accelerator</span><span class="token operator">:</span> <span class="token string">"CmdOrCtrl+V"</span><span class="token punctuation">,</span>        <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">"paste:"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"Select All"</span><span class="token punctuation">,</span>        <span class="token literal-property property">accelerator</span><span class="token operator">:</span> <span class="token string">"CmdOrCtrl+A"</span><span class="token punctuation">,</span>        <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">"selectAll:"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token punctuation">[</span>    application<span class="token punctuation">,</span>    edit  <span class="token punctuation">]</span>  Menu<span class="token punctuation">.</span><span class="token function">setApplicationMenu</span><span class="token punctuation">(</span>Menu<span class="token punctuation">.</span><span class="token function">buildFromTemplate</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们Electron不需要菜单, 所以第一种方式不合适； 所以我换了一种方式，直接在<code>document</code>中监听<code>onkeydown</code>事件来手动处理，如下所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">fixInputEvent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> clipboard <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> keyCodes <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token constant">V</span><span class="token operator">:</span> <span class="token number">86</span><span class="token punctuation">,</span>        <span class="token constant">C</span><span class="token operator">:</span> <span class="token number">67</span><span class="token punctuation">,</span>        <span class="token constant">X</span><span class="token operator">:</span> <span class="token number">88</span>    <span class="token punctuation">}</span>    document<span class="token punctuation">.</span><span class="token function-variable function">onkeydown</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> activeElement <span class="token operator">=</span>  event<span class="token punctuation">.</span>target        <span class="token keyword">if</span> <span class="token punctuation">(</span>activeElement<span class="token punctuation">.</span>tagName  <span class="token operator">!==</span> <span class="token string">'INPUT'</span><span class="token punctuation">)</span> <span class="token keyword">return</span>         <span class="token keyword">const</span> startOffset <span class="token operator">=</span> activeElement<span class="token punctuation">.</span>selectionStart        <span class="token keyword">const</span> endOffset <span class="token operator">=</span> activeElement<span class="token punctuation">.</span>selectionEnd        <span class="token keyword">const</span> clipboardText <span class="token operator">=</span> clipboard<span class="token punctuation">.</span><span class="token function">readText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>ctrlKey <span class="token operator">||</span> event<span class="token punctuation">.</span>metaKey<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// detect ctrl or cmd</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>which<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> keyCodes<span class="token punctuation">.</span><span class="token constant">V</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    activeElement<span class="token punctuation">.</span><span class="token function">setRangeText</span><span class="token punctuation">(</span>clipboardText<span class="token punctuation">,</span> startOffset<span class="token punctuation">,</span> endOffset<span class="token punctuation">,</span> <span class="token string">'end'</span><span class="token punctuation">)</span>                    activeElement<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">bubbles</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span>                <span class="token punctuation">}</span>                <span class="token keyword">case</span> keyCodes<span class="token punctuation">.</span><span class="token constant">C</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token keyword">const</span> text <span class="token operator">=</span> activeElement<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>startOffset<span class="token punctuation">,</span> endOffset<span class="token punctuation">)</span>                    clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>                    <span class="token keyword">break</span>                <span class="token punctuation">}</span>                <span class="token keyword">case</span> keyCodes<span class="token punctuation">.</span><span class="token constant">X</span><span class="token operator">:</span>  <span class="token punctuation">{</span>                    <span class="token keyword">const</span> text <span class="token operator">=</span> activeElement<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>startOffset<span class="token punctuation">,</span> endOffset<span class="token punctuation">)</span>                    clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>                    activeElement<span class="token punctuation">.</span><span class="token function">setRangeText</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> startOffset<span class="token punctuation">,</span> endOffset <span class="token punctuation">)</span>                    <span class="token keyword">break</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码处理了 <code>CTRL + C</code>、<code>CTRL + V</code>已经<code>CTRL + X</code> 三种情况，也就是复制、粘贴和剪切三种场景， 用到了<a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setRangeText">HTMLInputElement.setRangeText()</a> 这个函数，解决了在指定光标处复制、粘贴以及剪切等问题。大家感兴趣可以看看。</p><h2 id="electron-webpack-构建问题"><a href="#electron-webpack-构建问题" class="headerlink" title="electron-webpack 构建问题"></a>electron-webpack 构建问题</h2><p>开发用到了<a href="https://github.com/electron-userland/electron-webpack">electron-webpack</a> 构建工具，由于我们渲染进程的代码（前端HTML、JavaScript等代码）是其它项目已经写好的，所以不需要进行渲染进程打包，可以在<code>package.json</code>中关闭渲染进程打包。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"electronWebpack"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// 渲染进程无需打包</span>    <span class="token property">"renderer"</span><span class="token operator">:</span> <span class="token null keyword">null</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>既然关闭了渲染进程打包，那么我们已经写好的前端代码放在哪里呢？需要放在<code>static</code>文件夹， 并且在主进程中可以这样访问：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">1280</span><span class="token punctuation">,</span>    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">840</span><span class="token punctuation">,</span>    <span class="token literal-property property">center</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">autoHideMenuBar</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">webPreferences</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">webSecurity</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token literal-property property">preload</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'preload.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">nodeIntegration</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">enableRemoteModule</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'XXX视频会议'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>mainWindow<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__static<span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>electron-webpack</code>打包后，默认引入的第三方库都会默认设置为<code>external</code>, 所以如果引入了第三方库， 需要改下<code>package.json</code>, 增加<code>whiteListedModules</code>配置项，这样webpack才会把第三方法代码一起打包压缩。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"electronWebpack"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"renderer"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>  <span class="token property">"whiteListedModules"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"open"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>electron-webpack</code>打包会默认生成<code>SourceMap</code>文件， 我们一般生产环境不需要<code>SourceMap</code>，程序运行时还会报<code>Uncaught Exception: Error: Cannot find module source-map-support/source-map-support.js</code> 错误， 原因是<code>electron-webpack</code>使用了<a href="https://www.webpackjs.com/plugins/banner-plugin/">BannerPlugin</a>插件，默认会在打包后的文件中加入一句<code>require("source-map-support/source-map-support.js").install()</code>。</p><p>我们可以修改<code>electron-webpack</code>的配置文件来删除<code>BannerPlugin</code>插件， 在<code>package.json</code>中增加如下配置：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">  <span class="token property">"electronWebpack"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"main"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"extraEntries"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"@/preload.js"</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"webpackConfig"</span><span class="token operator">:</span> <span class="token string">"electron.config.js"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"renderer"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>    <span class="token property">"whiteListedModules"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"open"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>electron.config.js</code>内容如下所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    config<span class="token punctuation">.</span>devtool <span class="token operator">=</span> <span class="token boolean">false</span>    config<span class="token punctuation">.</span>plugins <span class="token operator">=</span> config<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">plugin</span> <span class="token operator">=&gt;</span> plugin<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token string">'BannerPlugin'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> config<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以解决<code>SourceMap</code>问题了。</p><h2 id="MAC及Windows打包"><a href="#MAC及Windows打包" class="headerlink" title="MAC及Windows打包"></a>MAC及Windows打包</h2><p>打包主要使用 <a href="https://www.electron.build/">electron-builder</a>来进行打包，我的<code>package.json</code>配置如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"cross-env NODE_ENV=development electron src/main/index.js"</span><span class="token punctuation">,</span>    <span class="token property">"compile"</span><span class="token operator">:</span> <span class="token string">"cross-env NODE_ENV=production electron-webpack"</span><span class="token punctuation">,</span>    <span class="token property">"mac"</span><span class="token operator">:</span> <span class="token string">"rm -rf release dist &amp;&amp; yarn compile &amp;&amp; electron-builder --mac --x64"</span><span class="token punctuation">,</span>    <span class="token property">"windows"</span><span class="token operator">:</span> <span class="token string">"rm -rf release dist &amp;&amp; yarn compile &amp;&amp; electron-builder --win --x64"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"build"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"appId"</span><span class="token operator">:</span> <span class="token string">"larry.asyncoder.com"</span><span class="token punctuation">,</span>    <span class="token property">"mac"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"asyncoder-web"</span><span class="token punctuation">,</span>      <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"dmg"</span><span class="token punctuation">,</span>      <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"./icon.icns"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"win"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"portable"</span><span class="token punctuation">,</span>      <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"./icon.png"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"directories"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"output"</span><span class="token operator">:</span> <span class="token string">"release/${platform}"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行<code>yarn mac</code>和 <code>yarn windows</code>就可以生成Mac上的<code>dmg</code>和windows上的<code>exe</code>文件。</p><p>值得说明的是， 在Mac上是没法直接对Windows环境进行打包的， 所以推荐使用<a href="https://www.docker.com/">docker</a>来进行打包。安装好<code>Docker</code>, 命令行进入工程目录，运行如下代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">-ti</span> <span class="token punctuation">\</span> --env-file <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">env</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-iE</span> <span class="token string">'DEBUG|NODE_|ELECTRON_|YARN_|NPM_|CI|CIRCLE|TRAVIS_TAG|TRAVIS|TRAVIS_REPO_|TRAVIS_BUILD_|TRAVIS_BRANCH|TRAVIS_PULL_REQUEST_|APPVEYOR_|CSC_|GH_|GITHUB_|BT_|AWS_|STRIP|BUILD_'</span><span class="token punctuation">)</span> <span class="token punctuation">\</span> <span class="token parameter variable">--env</span> <span class="token assign-left variable">ELECTRON_CACHE</span><span class="token operator">=</span><span class="token string">"/root/.cache/electron"</span> <span class="token punctuation">\</span> <span class="token parameter variable">--env</span> <span class="token assign-left variable">ELECTRON_BUILDER_CACHE</span><span class="token operator">=</span><span class="token string">"/root/.cache/electron-builder"</span> <span class="token punctuation">\</span> <span class="token parameter variable">-v</span> <span class="token variable">${<span class="token environment constant">PWD</span>}</span>:/project <span class="token punctuation">\</span> <span class="token parameter variable">-v</span> <span class="token variable">${<span class="token environment constant">PWD</span><span class="token operator">##</span>*<span class="token operator">/</span>}</span>-node-modules:/project/node_modules <span class="token punctuation">\</span> <span class="token parameter variable">-v</span> ~/.cache/electron:/root/.cache/electron <span class="token punctuation">\</span> <span class="token parameter variable">-v</span> ~/.cache/electron-builder:/root/.cache/electron-builder <span class="token punctuation">\</span> electronuserland/builder:wine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入以后，先运行<code>yarn</code>, 再运行<code>yarn windows</code>即可。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Node.js </tag>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFmpeg介绍</title>
      <link href="/2020/08/14/ffmpeg-jie-shao/"/>
      <url>/2020/08/14/ffmpeg-jie-shao/</url>
      
        <content type="html"><![CDATA[<p>A complete, cross-platform solution to record, convert and stream audio and video.</p><p>FFmpeg是一个音视频流录制、转换的跨平台的完整开源解决方案</p><p><img src="https://g.asyncoder.com/images/20200816205600-gTO9QB.jpg"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>访问 <a href="https://ffmpeg.org/download.html">FFmpeg官网</a> 进行安装</p><h3 id="FFmpeg家族工具"><a href="#FFmpeg家族工具" class="headerlink" title="FFmpeg家族工具"></a>FFmpeg家族工具</h3><ul><li>ffmpeg: 音视频编解码命令行工具</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-i</span> input.avi output.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ffmpeg通过-i参数将input.avi作为输入源，然后进行转码与转封装操作，输出到output.mp4中。ffmpeg转码工作流程如下图。</p><p><img src="https://pic1.zhimg.com/v2-91ae26021ae6e983befb45064669e61f_r.jpg"></p><ul><li>ffplay: 基于FFmpeg的播放器，可以播放本地或者网络视频流</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffplay http://ivi.bupt.edu.cn/hls/cctv1hd.m3u8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>ffprobe: 强大的多媒体分析工具</li></ul><p><code>ffprobe</code>可以从媒体文件或者媒体流程中获得媒体信息，比如音频的参数、视频的参数、媒体容器的参数信息等。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ffprobe sheep.mp4 -hide_banner</span>Input <span class="token comment">#0, mov,mp4,m4a,3gp,3g2,mj2, from 'out.mp4':</span>  Metadata:    major_brand     <span class="token builtin class-name">:</span> isom    minor_version   <span class="token builtin class-name">:</span> <span class="token number">512</span>    compatible_brands: isomiso2avc1mp41    encoder         <span class="token builtin class-name">:</span> Lavf58.20.100  Duration: 00:00:05.63, start: <span class="token number">0.000000</span>, bitrate: <span class="token number">1845</span> kb/s    Stream <span class="token comment">#0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p, 3360x2100, 1781 kb/s, 29.81 fps, 30 tbr, 16k tbn, 2000k tbc (default)</span>    Metadata:      handler_name    <span class="token builtin class-name">:</span> VideoHandler    Stream <span class="token comment">#0:1(und): Audio: vorbis (mp4a / 0x6134706D), 48000 Hz, mono, fltp, 63 kb/s (default)</span>    Metadata:      handler_name    <span class="token builtin class-name">:</span> SoundHandler<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h3><p><img src="https://pic2.zhimg.com/v2-3e634d74b5ff73fd3bf7be9b8798dc21_r.jpg"></p><p>不少同学可能会把「编码(codec)」和「格式(format)」混为一谈，因为编码和格式的命名有不少相同的，但其实他们是两个不同的概念。为了方便理解，可以将牛奶加工和音频视频的编码和格式做个对比。</p><p><img src="https://pic3.zhimg.com/v2-979052f127337ce1820f13a1b21dac52_r.jpg"></p><h2 id="功能展现"><a href="#功能展现" class="headerlink" title="功能展现"></a>功能展现</h2><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-h</span>Hyper fast Audio and Video encoderusage: ffmpeg <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>infile options<span class="token punctuation">]</span> <span class="token parameter variable">-i</span> infile<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">{</span><span class="token punctuation">[</span>outfile options<span class="token punctuation">]</span> outfile<span class="token punctuation">}</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用风格为 <code>ffmpeg {1} {2} -i {3} {4} {5}</code>，这五个部分的参数依次如下：</p><ul><li>全局参数</li><li>输入文件参数</li><li>输入文件</li><li>输出文件参数</li><li>输出文件</li></ul><p>也就是 <code>ffmpeg [全局参数] [输入文件参数] -i [输入文件] [输出文件参数] [输出文件]</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ffmpeg <span class="token punctuation">\</span><span class="token parameter variable">-y</span> <span class="token punctuation">\</span> <span class="token comment"># 全局参数</span><span class="token parameter variable">-c:a</span> libfdk_aac <span class="token parameter variable">-c:v</span> libx264 <span class="token punctuation">\</span> <span class="token comment"># 输入文件参数</span><span class="token parameter variable">-i</span> input.mp4 <span class="token punctuation">\</span> <span class="token comment"># 输入文件</span><span class="token parameter variable">-c:v</span> libvpx-vp9 <span class="token parameter variable">-c:a</span> libvorbis <span class="token punctuation">\</span> <span class="token comment"># 输出文件参数</span>output.webm <span class="token comment"># 输出文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看格式容器（Muxer-and-Demuxer）"><a href="#查看格式容器（Muxer-and-Demuxer）" class="headerlink" title="查看格式容器（Muxer and Demuxer）"></a>查看格式容器（Muxer and Demuxer）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-muxers</span>ffmpeg <span class="token parameter variable">-demuxers</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>mp4</code>、<code>mkv</code>、<code>webm</code>、<code>avi</code>、<code>ogg</code>等都是格式容器</p><h3 id="查看编码器和解码器"><a href="#查看编码器和解码器" class="headerlink" title="查看编码器和解码器"></a>查看编码器和解码器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-encoders</span>ffmpeg <span class="token parameter variable">-decoders</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>H.264</code>、<code>H.265</code>、<code>VP8</code>、<code>VP9</code>、<code>MP3</code>、<code>AAC</code> 都是编码格式</p><h3 id="录屏"><a href="#录屏" class="headerlink" title="录屏"></a>录屏</h3><p><a href="https://trac.ffmpeg.org/wiki/Capture/Capture/Desktop%E4%B8%AD%E6%96%87%E7%89%88%E6%9C%AC">https://trac.ffmpeg.org/wiki/Capture/Capture/Desktop%E4%B8%AD%E6%96%87%E7%89%88%E6%9C%AC</a></p><p>以Mac系统为例</p><ol><li>查看系统设备</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ffmpeg -f avfoundation -list_devices true -hide_banner  -i ""</span><span class="token punctuation">[</span>AVFoundation indev @ 0x7fe828e07c40<span class="token punctuation">]</span> AVFoundation video devices:<span class="token punctuation">[</span>AVFoundation indev @ 0x7fe828e07c40<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> FaceTime高清摄像头（内建）<span class="token punctuation">[</span>AVFoundation indev @ 0x7fe828e07c40<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> Capture <span class="token function">screen</span> <span class="token number">0</span><span class="token punctuation">[</span>AVFoundation indev @ 0x7fe828e07c40<span class="token punctuation">]</span> AVFoundation audio devices:<span class="token punctuation">[</span>AVFoundation indev @ 0x7fe828e07c40<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> Screenflick Loopback<span class="token punctuation">[</span>AVFoundation indev @ 0x7fe828e07c40<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> 外置麦克风<span class="token punctuation">[</span>AVFoundation indev @ 0x7fe828e07c40<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> MacBook Pro麦克风<span class="token punctuation">[</span>AVFoundation indev @ 0x7fe828e07c40<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> ZoomAudioDevice<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>进行视频播放，增加水印</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-y</span> <span class="token parameter variable">-f</span> avfoundation <span class="token parameter variable">-framerate</span> <span class="token number">30</span> <span class="token parameter variable">-i</span> <span class="token string">"1:1"</span> <span class="token parameter variable">-i</span> smile.png <span class="token parameter variable">-filter_complex</span> <span class="token assign-left variable">overlay</span><span class="token operator">=</span><span class="token string">"64:64"</span> output.mkv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的<code>1:1</code>表示第一步中的所有号，也就是<code>Capture screen 0</code>和 <code>外置麦克风</code></p><h3 id="查看文件编码信息"><a href="#查看文件编码信息" class="headerlink" title="查看文件编码信息"></a>查看文件编码信息</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ffmpeg -i out.mp4  -hide_banner</span>Input <span class="token comment">#0, mov,mp4,m4a,3gp,3g2,mj2, from 'out.mp4':</span>  Metadata:    major_brand     <span class="token builtin class-name">:</span> isom    minor_version   <span class="token builtin class-name">:</span> <span class="token number">512</span>    compatible_brands: isomiso2avc1mp41    encoder         <span class="token builtin class-name">:</span> Lavf58.20.100  Duration: 00:00:05.63, start: <span class="token number">0.000000</span>, bitrate: <span class="token number">1845</span> kb/s    Stream <span class="token comment">#0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p, 3360x2100, 1781 kb/s, 29.81 fps, 30 tbr, 16k tbn, 2000k tbc (default)</span>    Metadata:      handler_name    <span class="token builtin class-name">:</span> VideoHandler    Stream <span class="token comment">#0:1(und): Audio: vorbis (mp4a / 0x6134706D), 48000 Hz, mono, fltp, 63 kb/s (default)</span>    Metadata:      handler_name    <span class="token builtin class-name">:</span> SoundHandlerAt least one output <span class="token function">file</span> must be specified<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件转码"><a href="#文件转码" class="headerlink" title="文件转码"></a>文件转码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 转为HEVC/H.265编码</span>ffmpeg <span class="token parameter variable">-i</span> out.mkv <span class="token parameter variable">-c:v</span> libx265 h265.MP4<span class="token comment"># 转为H.264编码</span>ffmpeg <span class="token parameter variable">-i</span> out.mkv <span class="token parameter variable">-c:v</span> libx264 out.MP4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="视频截图"><a href="#视频截图" class="headerlink" title="视频截图"></a>视频截图</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在第5s的第一帧截图</span>ffmpeg <span class="token parameter variable">-ss</span> <span class="token number">5</span> <span class="token parameter variable">-i</span> output.mp4 <span class="token parameter variable">-vframes</span> <span class="token number">1</span> <span class="token parameter variable">-q:v</span> <span class="token number">2</span> out.png <span class="token comment"># 从第1s开始截图，持续5s，每秒截一帧</span>ffmpeg <span class="token parameter variable">-ss</span> <span class="token number">1</span> <span class="token parameter variable">-i</span> output.mp4 <span class="token parameter variable">-t</span> <span class="token number">5</span> <span class="token parameter variable">-r</span> <span class="token number">1</span> output/out-%00d.png <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面例子中，<code>-vframes 1</code>指定只截取一帧，<code>-q:v 2</code>表示输出的图片质量，一般是1到5之间（1 为质量最高）。</p><h3 id="生成GIF"><a href="#生成GIF" class="headerlink" title="生成GIF"></a>生成GIF</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从第2s开始，以每秒15帧的速度持续5s进行截图，然后生成gif</span>ffmpeg <span class="token parameter variable">-ss</span> 00:00:02.000 <span class="token parameter variable">-i</span> out.mp4 <span class="token parameter variable">-pix_fmt</span> rgb24 <span class="token parameter variable">-t</span> <span class="token number">5</span>  <span class="token parameter variable">-frames</span> <span class="token number">15</span> out.gif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="视频裁剪"><a href="#视频裁剪" class="headerlink" title="视频裁剪"></a>视频裁剪</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从第2s开始，连续剪5s然后生成新的视频</span>ffmpeg <span class="token parameter variable">-ss</span> <span class="token number">2</span> <span class="token parameter variable">-i</span> out.mp4 <span class="token parameter variable">-t</span> <span class="token number">5</span> new.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="加速、减速视频"><a href="#加速、减速视频" class="headerlink" title="加速、减速视频"></a>加速、减速视频</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 视频加速</span>ffmpeg <span class="token parameter variable">-i</span> output.mp4 <span class="token parameter variable">-vf</span> <span class="token string">"setpts=0.5*PTS"</span> new.mp4<span class="token comment"># 视频减速</span>ffmpeg <span class="token parameter variable">-i</span> output.mp4 <span class="token parameter variable">-vf</span> <span class="token string">"setpts=2*PTS"</span> new.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="音频文件增加图片"><a href="#音频文件增加图片" class="headerlink" title="音频文件增加图片"></a>音频文件增加图片</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-loop</span> <span class="token number">1</span> <span class="token parameter variable">-i</span> smile.jpg <span class="token parameter variable">-i</span> input.mp3 <span class="token parameter variable">-c:v</span> libx264 <span class="token parameter variable">-c:a</span> aac <span class="token parameter variable">-b:a</span> 192k <span class="token parameter variable">-shortest</span> output.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令中，有两个输入文件，一个是封面图片cover.jpg，另一个是音频文件input.mp3。<code>-loop 1</code>参数表示图片无限循环，<code>-shortest</code>参数表示音频文件结束，输出视频就结束。</p><h3 id="提取视频中的音频"><a href="#提取视频中的音频" class="headerlink" title="提取视频中的音频"></a>提取视频中的音频</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-i</span> https://g.asyncoder.com/sheep.mp4 <span class="token parameter variable">-vn</span> <span class="token parameter variable">-y</span> out.mp3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="增加水印"><a href="#增加水印" class="headerlink" title="增加水印"></a>增加水印</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在视频中间增加水印</span>ffmpeg <span class="token parameter variable">-i</span> output.mkv <span class="token parameter variable">-i</span> smile.png <span class="token parameter variable">-y</span> <span class="token parameter variable">-filter_complex</span> <span class="token assign-left variable">overlay</span><span class="token operator">=</span><span class="token string">"(main_w/2)-(overlay_w/2):(main_h/2)-(overlay_h)/2"</span> output.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>overlay</code>用于设置水印位置， <code>main_w</code>和<code>main_h</code>表示视频宽度和高度, <code>overlay_w</code>和<code>overlay_h</code>表示水印宽度和高度</p><h3 id="直播推流"><a href="#直播推流" class="headerlink" title="直播推流"></a>直播推流</h3><ul><li>安装docker环境</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull alfg/nginx-rtmp<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-p</span> <span class="token number">1935</span>:1935 <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 <span class="token parameter variable">--rm</span> alfg/nginx-rtmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>推流</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-re</span>  <span class="token parameter variable">-stream_loop</span> <span class="token parameter variable">-1</span> <span class="token parameter variable">-i</span> ~/Movies/霸王龙.mp4  <span class="token parameter variable">-f</span> flv rtmp://l27.0.0.1:1935/stream/mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>re</code>表示输入视频的帧率, <code>-stream_loop</code>表示循环播放的次数，<code>-</code>表示无限循环</p><p>也可以增加水印</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-re</span>  <span class="token parameter variable">-stream_loop</span> <span class="token parameter variable">-1</span> <span class="token parameter variable">-i</span> ~/Movies/霸王龙.mp4 <span class="token parameter variable">-i</span> smile.png <span class="token parameter variable">-filter_complex</span> <span class="token assign-left variable">overlay</span><span class="token operator">=</span><span class="token string">"(main_w/2)-(overlay_w/2):(main_h/2)-(overlay_h)/2"</span>  <span class="token parameter variable">-f</span> flv rtmp://l27.0.0.1:1935/stream/mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>推流到腾讯云</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-re</span>  <span class="token parameter variable">-stream_loop</span> <span class="token parameter variable">-1</span> <span class="token parameter variable">-i</span> ~/Movies/霸王龙.mp4 <span class="token parameter variable">-f</span> flv <span class="token string">'rtmp://103467.livepush.myqcloud.com/live/mp4?txSecret=1e040cdd5347f8ec0d12df305d3cfad9&amp;txTime=5F38A505'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以通过<code>https://103467.liveplay.myqcloud.com/live/mp4.flv</code>进行访问</p><ul><li>测试</li></ul><p>可以通过<code>ffplay rtmp://l27.0.0.1:1935/stream/mp4</code>进行测试，也可以访问<code>ffplay http://127.0.0.1:8080/live/mp4.m3u8</code>进行测试</p><p><img src="https://g.asyncoder.com/images/20200814101839-YPRWCa.png"></p><p><img src="https://g.asyncoder.com/images/20200814101605-1EtOgH.png"></p><p><img src="https://g.asyncoder.com/images/20200814102307-KLm7ck.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://einverne.github.io/post/2015/12/ffmpeg-first.html">ffmpeg 入门笔记</a></li><li><a href="https://www.ruanyifeng.com/blog/2020/01/ffmpeg.html">FFmpeg 视频处理入门教程</a></li><li><a href="https://zhuanlan.zhihu.com/p/137686779">刻意练习FFmpeg系列：音视频基础概念格式和编码</a></li><li><a href="https://zhuanlan.zhihu.com/p/37516093">FFmpeg概述及编码支持</a></li><li><a href="https://www.cnblogs.com/leisure_chn/p/10434209.html">FFmpeg中overlay滤镜用法-水印及画中画</a></li><li><a href="https://trac.ffmpeg.org/wiki/Capture/Capture/Desktop%E4%B8%AD%E6%96%87%E7%89%88%E6%9C%AC">ffmpeg录屏</a></li><li><a href="https://github.com/alfg/docker-nginx-rtmp">docker-nginx-rtmp</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 系统软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 媒体处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac上编译openSSL到WebAssembly</title>
      <link href="/2020/01/02/mac-shang-bian-yi-openssl-dao-webassembly/"/>
      <url>/2020/01/02/mac-shang-bian-yi-openssl-dao-webassembly/</url>
      
        <content type="html"><![CDATA[<p>最近想利用WebAssembly来调用OpenSSL里面的MD5加密库，采用如下命令进行编译：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~ emcc md5.c <span class="token parameter variable">-I</span> /usr/local/Cellar/openssl@1.1/1.1.1d/include <span class="token parameter variable">-L</span> /usr/local/Cellar/openssl@1.1/1.1.1d/lib <span class="token parameter variable">-lcrypto</span>  <span class="token parameter variable">-s</span> <span class="token assign-left variable">EXTRA_EXPORTED_RUNTIME_METHODS</span><span class="token operator">=</span><span class="token string">'["cwrap", "ccall"]'</span> <span class="token parameter variable">-o</span> md5.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译时发现了如下问题：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shared:WARNING: object /var/folders/gk/_j9gq7sn6d19820tz77q5k600000gn/T/emscripten_temp_0ybodbu3_archive_contents/x86_64cpuid.o is not a valid object <span class="token function">file</span> <span class="token keyword">for</span> emscripten, cannot <span class="token function">link</span>error: undefined symbol: MD5_Finalwarning: To disable errors <span class="token keyword">for</span> undefined symbols use <span class="token variable"><span class="token variable">`</span><span class="token parameter variable">-s</span> <span class="token assign-left variable">ERROR_ON_UNDEFINED_SYMBOLS</span><span class="token operator">=</span><span class="token number">0</span><span class="token variable">`</span></span>error: undefined symbol: MD5_Initerror: undefined symbol: MD5_UpdateError: Aborting compilation due to previous errorsshared:ERROR: <span class="token string">'/usr/local/bin/node /usr/local/Cellar/emscripten/1.38.44/libexec/src/compiler.js /var/folders/gk/_j9gq7sn6d19820tz77q5k600000gn/T/tmpmptz1ty9.txt /usr/local/Cellar/emscripten/1.38.44/libexec/src/library_pthread_stub.js'</span> failed <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Google和StackOverflow下才发现，Mac系统自带的OpenSSL在WebAssembly中是没法直接是用的；因为WebAssembly和操作系统无关，不能直接使用和操作系统相关的库文件，我们需要利用<code>Emscripten</code>重新编译下。</p><h2 id="编译openSSL"><a href="#编译openSSL" class="headerlink" title="编译openSSL"></a>编译openSSL</h2><p>首先下载最新的OpenSSL，这里我下载的是 <a href="https://github.com/openssl/openssl/releases/tag/OpenSSL_1_1_1d">https://github.com/openssl/openssl/releases/tag/OpenSSL_1_1_1d</a>，现在后解压，进入<code>openssl-OpenSSL_1_1_1d</code>文件夹。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">emcmake ./Configure  darwin64-x86_64-cc -no-asm <span class="token parameter variable">--api</span><span class="token operator">=</span><span class="token number">1.1</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改Makefile文件"><a href="#修改Makefile文件" class="headerlink" title="修改Makefile文件"></a>修改Makefile文件</h3><ul><li>将 <code>CROSS_COMPILE=/usr/local/Cellar/emscripten/1.38.44/libexec/em</code> 改为 <code>CROSS_COMPILE=</code></li><li>将 <code>CNF_CFLAGS=-arch x86_64</code> 改为 <code>CNF_CFLAGS=</code></li></ul><blockquote><p>这步非常重要，如果不修改，容易出现编译错误!</p></blockquote><h3 id="编译OpenSSL"><a href="#编译OpenSSL" class="headerlink" title="编译OpenSSL"></a>编译OpenSSL</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">emmake <span class="token function">make</span> <span class="token parameter variable">-j</span> <span class="token number">12</span> build_generated libssl.a libcrypto.a<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/Downloads/openssl/libs<span class="token function">cp</span> <span class="token parameter variable">-R</span> include ~/Downloads/openssl/include<span class="token function">cp</span> libcrypto.a libssl.a ~/Downloads/openssl/libs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>编译成功后，文件夹下会出现<code>libssl.a</code>和<code>libcrypto.a</code>两个文件，后续编译会需要这两个文件</p><h2 id="调用-OpenSSL"><a href="#调用-OpenSSL" class="headerlink" title="调用 OpenSSL"></a>调用 OpenSSL</h2><h3 id="样例准备"><a href="#样例准备" class="headerlink" title="样例准备"></a>样例准备</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// md5.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;emscripten.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;openssl/md5.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>EMSCRIPTEN_KEEPALIVE<span class="token keyword">void</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>  MD5_CTX md5_ctx<span class="token punctuation">;</span>  <span class="token keyword">int</span> MD5_BYTES <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> md5sum<span class="token punctuation">[</span>MD5_BYTES<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">MD5_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>md5_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">MD5_Update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>md5_ctx<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">MD5_Final</span><span class="token punctuation">(</span>md5sum<span class="token punctuation">,</span> <span class="token operator">&amp;</span>md5_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MD5_BYTES<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token string">"%02x"</span><span class="token punctuation">,</span> md5sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  result<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码编译"><a href="#代码编译" class="headerlink" title="代码编译"></a>代码编译</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">emcc md5.c <span class="token parameter variable">-I</span> ~/Downloads/openssl/include <span class="token parameter variable">-L</span> ~/Downloads/openssl/libs <span class="token parameter variable">-lcrypto</span> <span class="token parameter variable">-s</span> <span class="token assign-left variable">EXTRA_EXPORTED_RUNTIME_METHODS</span><span class="token operator">=</span><span class="token string">'["cwrap", "ccall"]'</span> <span class="token parameter variable">-o</span> md5.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译成功后，会生成<code>md5.js</code>和<code>md5.wasm</code>两个文件。</p><h3 id="Node-js-调用"><a href="#Node-js-调用" class="headerlink" title="Node.js 调用"></a>Node.js 调用</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./md5.js'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">mallocByteBuffer</span> <span class="token operator">=</span> <span class="token parameter">len</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> ptr <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">_malloc</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span>    <span class="token keyword">const</span> heapBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token constant">HEAPU8</span><span class="token punctuation">.</span>buffer<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span>    <span class="token keyword">return</span> heapBytes<span class="token punctuation">}</span><span class="token comment">// md5.wasm加载完毕后会执行该回调</span>m<span class="token punctuation">.</span><span class="token function-variable function">onRuntimeInitialized</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> md5 <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">cwrap</span><span class="token punctuation">(</span><span class="token string">'md5'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'number'</span><span class="token punctuation">,</span> <span class="token string">'number'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// 需要进行md5加密的字符串</span>    <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'admin'</span>    <span class="token keyword">const</span> array <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> inBuffer <span class="token operator">=</span> <span class="token function">mallocByteBuffer</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    inBuffer<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>    <span class="token keyword">const</span> outBuffer <span class="token operator">=</span> <span class="token function">mallocByteBuffer</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token comment">// 调用wasm接口</span>    <span class="token function">md5</span><span class="token punctuation">(</span>inBuffer<span class="token punctuation">.</span>byteOffset<span class="token punctuation">,</span> outBuffer<span class="token punctuation">.</span>byteOffset<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>outBuffer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">// 输出结果为：21232f297a57a5a743894a0e4a801fc3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="预编译文件"><a href="#预编译文件" class="headerlink" title="预编译文件"></a>预编译文件</h2><p>为了方便大家使用，我已经编译好了针对WebAssembly的openSSL，点击<a href="https://raw.githubusercontent.com/flyingzl/webAssembly-openssl/master/openssl-emscripten.zip">下载</a>。</p><p>本文涉及到的样例位于<a href="https://github.com/flyingzl/webAssembly-openssl">https://github.com/flyingzl/webAssembly-openssl</a>，请自行查阅。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/wapm-packages/OpenSSL/blob/master/build.sh">wapm-packages/OpenSSL</a></li><li><a href="https://github.com/TrueBitFoundation/wasm-ports/blob/master/openssl.sh">TrueBitFoundation/wasm-ports</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> WASM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebAssembly简介</title>
      <link href="/2019/12/20/webassembly-jian-jie/"/>
      <url>/2019/12/20/webassembly-jian-jie/</url>
      
        <content type="html"><![CDATA[<p>WebAssembly是一个可移植、体积小、加载快并且兼容 Web 的全新二进制格式，其文件后缀名为wasm，是由主流浏览器厂商组成的 W3C 社区团体 制定的一个新的规范。</p><p><img src="https://g.asyncoder.com/images/2019%7Bmon%7D2014644-wasm.png" alt="wasm示意图"></p><p>主流浏览器已经支持WebAssembly</p><p><img src="https://g.asyncoder.com/images/2019%7Bmon%7D201483-wasm_browsers.png" alt="wasm浏览器支持情况"></p><p><img src="https://g.asyncoder.com/images/2019%7Bmon%7D2014955-wasm_browsers_caniuse.jpg" alt="wasm浏览器支持情况"></p><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>wasm是一种二进制格式，主流的C/C++、Go以及Rust都可以编译wasm，<a href="https://emscripten.org/">Emscripten</a>就是一个用于将C/C++编译为wasm的编译器工具集。</p><p>安装方式可以参考 <a href="https://emscripten.org/docs/getting_started/downloads.html">Emscripten安装指南</a>，如果是Mac用户并安装了brew，可以直接<code>brew install emscripten</code>进行安装，更为便捷。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~ emcc <span class="token parameter variable">-v</span>emcc <span class="token punctuation">(</span>Emscripten gcc/clang-like replacement + linker emulating GNU ld<span class="token punctuation">)</span> <span class="token number">1.38</span>.44clang version <span class="token number">6.0</span>.1  <span class="token punctuation">(</span>emscripten <span class="token number">1.38</span>.44 <span class="token builtin class-name">:</span> <span class="token number">1.38</span>.44<span class="token punctuation">)</span>Target: x86_64-apple-darwin19.0.0Thread model: posixInstalledDir: /usr/local/Cellar/emscripten/1.38.44/libexec/llvm/binshared:INFO: <span class="token punctuation">(</span>Emscripten: Running sanity checks<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果运行<code>emcc -v</code>可以正常，表示<code>Emscripten</code>已经正常安装成功</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="永远的hello-world"><a href="#永远的hello-world" class="headerlink" title="永远的hello world"></a>永远的hello world</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// hello.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行<code>emcc hello.c -o hello.html</code> 进行编译，编译后会生成三个文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── hello.c├── hello.html├── hello.js└── hello.wasm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行 <code>emrun --port 8080 .</code>可以自动打开浏览器</p><p><img src="https://g.asyncoder.com/images/2019%7Bmon%7D20142048-wasm-helloworld.jpg" alt="hell world"></p><p>也可以运行 <code>emcc hello.c -o hello.js</code>，这样不生成<code>hello.html</code>文件，可以通过nodejs直接运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~ emcc hello.c <span class="token parameter variable">-o</span> hello.js~ <span class="token function">node</span> hello.jshello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// fib.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;emscripten.h&gt;</span> </span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// EMSCRIPTEN_KEEPALIVE是一个宏，用于标识函数名不被修改</span><span class="token keyword">int</span> EMSCRIPTEN_KEEPALIVE <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行<code>emcc fib.c -o fib.js -s EXPORTED_FUNCTIONS='["_greet"]' -s EXTRA_EXPORTED_RUNTIME_METHODS='["cwrap", "ccall"]'</code>进行编译</p><p>接下来，我们来调用<code>fib.js</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fib.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    Module<span class="token punctuation">.</span><span class="token function-variable function">onRuntimeInitialized</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">// 通过Module.cwrap调用</span>        <span class="token keyword">const</span> fib <span class="token operator">=</span> Module<span class="token punctuation">.</span><span class="token function">cwrap</span><span class="token punctuation">(</span><span class="token string">'fib'</span><span class="token punctuation">,</span> <span class="token string">'number'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'number'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fib(10)=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token comment">// 通过Module.ccall调用</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> Module<span class="token punctuation">.</span><span class="token function">ccall</span><span class="token punctuation">(</span><span class="token string">'fib'</span><span class="token punctuation">,</span> <span class="token string">'number'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'number'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fib(10)=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token comment">// 调用greet</span>        <span class="token keyword">const</span> showGreet <span class="token operator">=</span> Module<span class="token punctuation">.</span><span class="token function">cwrap</span><span class="token punctuation">(</span><span class="token string">'greet'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token function">showGreet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>cwrap</code>和<code>ccall</code>都是调用wasm里面的原生函数，cwrap的参数为<code>cwrap(functionName, returnType, argsType)</code>, <code>ccall</code>的参数为<code>ccall(functionName, returnType, argsType, parameters)</code>。前者返回一个函数，后者直接 返回执行结果</p><h3 id="传递指针"><a href="#传递指针" class="headerlink" title="传递指针"></a>传递指针</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// pointer.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;emscripten.h&gt;</span> <span class="token comment">// note we added the emscripten header</span></span><span class="token comment">// 交换数字</span><span class="token keyword">void</span> EMSCRIPTEN_KEEPALIVE <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token operator">*</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 数组里面的每个数字加1</span><span class="token keyword">void</span> EMSCRIPTEN_KEEPALIVE <span class="token function">addOne</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> input_ptr<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> output_ptr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    output_ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> input_ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 统计字符串里面某个数字的出现次数</span><span class="token keyword">int</span> EMSCRIPTEN_KEEPALIVE <span class="token function">countOccurrences</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">char</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行<code>emcc pointer.c -o pointer.js -s EXTRA_EXPORTED_RUNTIME_METHODS='["cwrap", "ccall", "getValue", "setValue"]'</code>进行编译。这次我们用Node.js来执行<code>pointer.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// pointer_demo.js</span><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./pointer.js'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">mallocByteBuffer</span> <span class="token operator">=</span> <span class="token parameter">len</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> ptr <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">_malloc</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span>    <span class="token keyword">const</span> heapBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token constant">HEAPU8</span><span class="token punctuation">.</span>buffer<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span>    <span class="token keyword">return</span> heapBytes<span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token function-variable function">mallocUInt32Buffer</span> <span class="token operator">=</span> <span class="token parameter">len</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">{</span>    <span class="token keyword">const</span> ptr <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">_malloc</span><span class="token punctuation">(</span>len <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> heapBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint32Array</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token constant">HEAPU8</span><span class="token punctuation">.</span>buffer<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span>    <span class="token keyword">return</span> heapBytes<span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token function-variable function">free</span>  <span class="token operator">=</span> <span class="token parameter">nativeBuffer</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> nativeBuffer <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        m<span class="token punctuation">.</span><span class="token function">_free</span><span class="token punctuation">(</span>nativeBuffer<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nativeBuffer <span class="token operator">&amp;&amp;</span> nativeBuffer<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nativeBuffer<span class="token punctuation">.</span>buffer <span class="token keyword">instanceof</span> <span class="token class-name">ArrayBuffer</span> <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">.</span><span class="token function">_free</span><span class="token punctuation">(</span>nativeBuffer<span class="token punctuation">.</span>byteOffset<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 交换数字</span><span class="token keyword">const</span> <span class="token function-variable function">swapNumbers</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>first <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> second  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> aPtr <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">_malloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> bPtr <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">_malloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    m<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>aPtr<span class="token punctuation">,</span> first<span class="token punctuation">,</span> <span class="token string">'i32'</span><span class="token punctuation">)</span>    m<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>bPtr<span class="token punctuation">,</span> second<span class="token punctuation">,</span> <span class="token string">'i32'</span><span class="token punctuation">)</span>    m<span class="token punctuation">.</span><span class="token function">ccall</span><span class="token punctuation">(</span><span class="token string">'swap'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'number'</span><span class="token punctuation">,</span> <span class="token string">'number'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>aPtr<span class="token punctuation">,</span> bPtr<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">first</span><span class="token operator">:</span> m<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>aPtr<span class="token punctuation">,</span> <span class="token string">'i32'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">second</span><span class="token operator">:</span> m<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>bPtr<span class="token punctuation">,</span> <span class="token string">'i32'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 数组数字加1</span><span class="token keyword">const</span> <span class="token function-variable function">plusArrays</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 传递数组</span>    <span class="token keyword">const</span> length <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length    <span class="token keyword">const</span> inputBuffer <span class="token operator">=</span> <span class="token function">mallocUInt32Buffer</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span>    <span class="token keyword">const</span> outputBuffer <span class="token operator">=</span> <span class="token function">mallocUInt32Buffer</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span>    <span class="token comment">// 填充数据</span>    inputBuffer<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>    m<span class="token punctuation">.</span><span class="token function">ccall</span><span class="token punctuation">(</span><span class="token string">'addOne'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'number'</span><span class="token punctuation">,</span> <span class="token string">'number'</span><span class="token punctuation">,</span> <span class="token string">'number'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>inputBuffer<span class="token punctuation">.</span>byteOffset<span class="token punctuation">,</span> outputBuffer<span class="token punctuation">.</span>byteOffset<span class="token punctuation">,</span> length<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> outputArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Int32Array</span><span class="token punctuation">(</span>outputBuffer<span class="token punctuation">.</span>buffer<span class="token punctuation">,</span> outputBuffer<span class="token punctuation">.</span>byteOffset<span class="token punctuation">,</span> length<span class="token punctuation">)</span>    <span class="token function">free</span><span class="token punctuation">(</span>inputBuffer<span class="token punctuation">)</span>    <span class="token function">free</span><span class="token punctuation">(</span>outputBuffer<span class="token punctuation">)</span>    <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>outputArray<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 检测字符串中某个字符出现的次数</span><span class="token keyword">const</span> countOccurrences <span class="token operator">=</span> <span class="token punctuation">(</span>words<span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 传递字符串</span>    <span class="token keyword">const</span> countOccurrences <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">cwrap</span><span class="token punctuation">(</span><span class="token string">"countOccurrences"</span><span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"number"</span><span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token keyword">const</span> array <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> length <span class="token operator">=</span> array<span class="token punctuation">.</span>length    <span class="token keyword">const</span> inputBuffer <span class="token operator">=</span> <span class="token function">mallocByteBuffer</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span>    inputBuffer<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>    <span class="token keyword">const</span> counts <span class="token operator">=</span> <span class="token function">countOccurrences</span><span class="token punctuation">(</span>inputBuffer<span class="token punctuation">.</span>byteOffset<span class="token punctuation">,</span> length<span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">free</span><span class="token punctuation">(</span>inputBuffer<span class="token punctuation">)</span>    <span class="token keyword">return</span> counts<span class="token punctuation">}</span>m<span class="token punctuation">.</span><span class="token function-variable function">onRuntimeInitialized</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> numbersObj <span class="token operator">=</span> <span class="token function">swapNumbers</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">first</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">second</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbersObj<span class="token punctuation">)</span>    <span class="token keyword">const</span> plusNumbers <span class="token operator">=</span> <span class="token function">plusArrays</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>plusNumbers<span class="token punctuation">)</span>    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">countOccurrences</span><span class="token punctuation">(</span><span class="token string">'WebAssembly'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">count=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~ <span class="token function">node</span> pointer_demo.js<span class="token punctuation">{</span> first: <span class="token number">5</span>, second: <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">[</span> <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">5</span>, <span class="token number">6</span> <span class="token punctuation">]</span><span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调用C"><a href="#调用C" class="headerlink" title="调用C++"></a>调用C++</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// binding.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;emscripten.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;emscripten/bind.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> emscripten<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token function">Person</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">age</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">plusAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">++</span>age<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> age<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age_<span class="token punctuation">)</span> <span class="token punctuation">{</span> age <span class="token operator">=</span> age_<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"(name="</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">", age="</span> <span class="token operator">&lt;&lt;</span> age <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>string <span class="token function">getStringFromInstance</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person <span class="token operator">&amp;</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> instance<span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>  <span class="token keyword">int</span> age<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// Binding code</span><span class="token function">EMSCRIPTEN_BINDINGS</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token generic-function"><span class="token function">class_</span><span class="token generic class-name"><span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"Person"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token generic-function"><span class="token function">constructor</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token string">"plusAge"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Person<span class="token double-colon punctuation">::</span>plusAge<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Person<span class="token double-colon punctuation">::</span>toString<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Person<span class="token double-colon punctuation">::</span>getAge<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Person<span class="token double-colon punctuation">::</span>setAge<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">class_function</span><span class="token punctuation">(</span><span class="token string">"getStringFromInstance"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Person<span class="token double-colon punctuation">::</span>getStringFromInstance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 <code>emcc --bind binding.cpp -o binding.js</code>。这里利用了<code>Emscripten</code>的<a href="https://emscripten.org/docs/porting/connecting_cpp_and_javascript/embind.html#embind">embind</a>功能，它可以直接把C++里面的类或者函数映射为Javascript里面的对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//binding_demo.js</span><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./binding.js'</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span><span class="token function-variable function">onRuntimeInitialized</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> Person <span class="token operator">=</span> m<span class="token punctuation">.</span>Person    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'larry'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>    person<span class="token punctuation">.</span><span class="token function">plusAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    person<span class="token punctuation">.</span><span class="token function">plusAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">person.age = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>person<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token function">getStringFromInstance</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span>    person<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~  <span class="token function">node</span> binding_demo.jsperson.age <span class="token operator">=</span> <span class="token number">22</span>larry<span class="token punctuation">(</span>name<span class="token operator">=</span>larry, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>更多的内容请参考<a href="https://emscripten.org/docs/getting_started/index.html">Emscripten</a>官网。本文涉及到的样例请点击<a href="https://g.asyncoder.com/images/202012193556-wasm-demo.zip">下载</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> WASM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取新浪微博用户头像</title>
      <link href="/2019/12/06/huo-qu-xin-lang-wei-bo-yong-hu-tou-xiang/"/>
      <url>/2019/12/06/huo-qu-xin-lang-wei-bo-yong-hu-tou-xiang/</url>
      
        <content type="html"><![CDATA[<p>在之前的<a href="https://asyncoder.com/2018/09/21/%E5%9C%A8%E5%BE%AE%E4%BF%A1H5%E7%BD%91%E9%A1%B5%E4%B8%AD%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF/">在微信H5网页中获取用户基本信息</a>一文中， 我们提到了如何在微信中获取用户信息，这一篇小文主要分析如何在新浪微博中获取用户信息，尤其是个人头像。</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>和微信类似，微博也提供了<a href="http://jssdk.sinaapp.com/">JSSDK</a>方便开发者使用。要想使用新浪微博的JSSDK，需要先<a href="https://open.weibo.com/apps/new?sort=mobile">注册一个微连接应用</a>，创建好后，<strong>输入应用的安全域名地址</strong>就可以使用了。在使用JSSDK时， 微博会校验SDK是否在特定的安全域名下运行，否则会拒绝返回执行结果。</p><p><img src="https://g.asyncoder.com/images/20191206140942-1.jpg" alt="创建微博应用"></p><p><img src="https://g.asyncoder.com/images/20191206141112-2.jpg" alt="设置好安全域名"></p><h2 id="引入JSSDK"><a href="#引入JSSDK" class="headerlink" title="引入JSSDK"></a>引入JSSDK</h2><p>根据<a href="http://jssdk.sinaapp.com/start.php">官方文档</a>， 需要在<code>页面的HTML标签中增加XML命名空间</code>，如下代码所示：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>wb</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://open.weibo.com/wb<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不使用微博组件，只是单纯的使用JSSDK，可以不用增加XML命名空间</p><p>同时引入对应的JSSDK</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://tjs.sjs.sinajs.cn/open/api/js/wb.js?appkey=523439410<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将<code>523439410</code>改为创建应用的appKey即可。</p><h2 id="使用JSSDK"><a href="#使用JSSDK" class="headerlink" title="使用JSSDK"></a>使用JSSDK</h2><p>JSSDK的使用可以参考官方的<a href="http://jssdk.sinaapp.com/api.php">JSSDK API文档</a>， 接口都比较简单，主要调用新浪微博<a href="https://open.weibo.com/wiki/%E5%BE%AE%E5%8D%9AAPI">OAuth API</a>。为了方便调试，新浪微博还提供了一个<a href="https://open.weibo.com/tools/apitest.php">在线调试工具</a>，大家感兴趣也可以试试。具体来说，主要提供了下面的几个接口，我们一一简单说明下。</p><h3 id="登入接口"><a href="#登入接口" class="headerlink" title="登入接口"></a>登入接口</h3><p>只需要调用<code>WB2.login</code>即可，例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">WB2</span><span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 已经登入</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="退出接口"><a href="#退出接口" class="headerlink" title="退出接口"></a>退出接口</h3><p>只需要调用<code>WB2.logout</code>即可，例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">WB2</span><span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 已经退出</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="检测是否登入接口"><a href="#检测是否登入接口" class="headerlink" title="检测是否登入接口"></a>检测是否登入接口</h3><p>只需要调用<code>WB2.checkLogin()</code>即可，例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> loginStatus <span class="token operator">=</span> <span class="token constant">WB2</span><span class="token punctuation">.</span><span class="token function">checkLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><h3 id="查询信息接口"><a href="#查询信息接口" class="headerlink" title="查询信息接口"></a>查询信息接口</h3><p>此步主要用于调用微博的OAuth API，需要先调用<code>WB2.anyWhere</code>，然后在其回调里面调用<code>parseCMD</code>接口。例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">WB2</span><span class="token punctuation">.</span><span class="token function">anyWhere</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">W</span></span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 获取用户的uid</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'/account/get_uid.json'</span>    <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>        <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token number">60</span>    <span class="token punctuation">}</span>    <span class="token constant">W</span><span class="token punctuation">.</span><span class="token function">parseCMD</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">sResult<span class="token punctuation">,</span> bStatus</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token comment">// bStauts用于标识是否正常返回结果</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 输出结果：{uid: 1093567195}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sResult<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码主要用于获取用户的uid，比如我们拿到了uid为<code>1093567195</code>的用户，现在我们查询该用户的基本信息</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">WB2</span><span class="token punctuation">.</span><span class="token function">anyWhere</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">W</span></span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 查询用户的基本信息</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'/users/show.json'</span>    <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">uid</span><span class="token operator">:</span> <span class="token string">'1093567195'</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>        <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token number">60</span>    <span class="token punctuation">}</span>    <span class="token constant">W</span><span class="token punctuation">.</span><span class="token function">parseCMD</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">sResult<span class="token punctuation">,</span> bStatus</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token comment">// bStauts用于标识是否正常返回结果</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 输出结果：{93567195, idstr: "1093567195", class: 1, screen_name: "flyingzl", name: "flyingzl", …}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sResult<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>/users/show.json</code>这个接口主要用于查询用户的基本信息，具体可以参考<a href="https://open.weibo.com/wiki/2/users/show">https://open.weibo.com/wiki/2/users/show</a>接口。里面有一个<code>avatar_large</code>字段，可以获取到用户的高清头像。</p><h3 id="获取用户头像"><a href="#获取用户头像" class="headerlink" title="获取用户头像"></a>获取用户头像</h3><p>每次调用<code>WB2.anyWhere</code>和<code>W.parseCMD</code>比较麻烦，我们简单封装下，然后代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">WB2</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token function-variable function">parseCMD</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token constant">WB2</span><span class="token punctuation">.</span><span class="token function">anyWhere</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">W</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token constant">W</span><span class="token punctuation">.</span><span class="token function">parseCMD</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">sResult<span class="token punctuation">,</span> bStatus</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        bStatus <span class="token operator">?</span> <span class="token function">resolve</span><span class="token punctuation">(</span>sResult<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">reject</span><span class="token punctuation">(</span>sResult<span class="token punctuation">)</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token punctuation">{</span>                    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token number">60</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> isLoginPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token constant">WB2</span><span class="token punctuation">.</span><span class="token function">checkLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        status <span class="token operator">?</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token constant">WB2</span><span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    isLoginPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> queryUIDPromise <span class="token operator">=</span> <span class="token function">parseCMD</span><span class="token punctuation">(</span><span class="token string">'/account/get_uid.json'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span>uid<span class="token punctuation">)</span>        <span class="token keyword">const</span> queryAvatarPromise <span class="token operator">=</span> queryUIDPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">uid</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">parseCMD</span><span class="token punctuation">(</span><span class="token string">'/users/show.json'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> uid <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">o</span> <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>avatar_large<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        queryAvatarPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">url</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// url 为用户的头像</span>            <span class="token keyword">var</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            image<span class="token punctuation">.</span>src <span class="token operator">=</span> url            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token constant">WB2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://g.asyncoder.com/images/20191206150701-3.jpg" alt="效果"></p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 媒体处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>whistle使用介绍</title>
      <link href="/2019/11/29/whistle-shi-yong-jie-shao/"/>
      <url>/2019/11/29/whistle-shi-yong-jie-shao/</url>
      
        <content type="html"><![CDATA[<p>whistle(读音[ˈwɪsəl])基于Node实现的跨平台web调试代理工具，类似的工具有Windows平台上的Fiddler和Mac上的Charles，主要用于查看、修改HTTP、HTTPS、Websocket的请求、响应，也可以作为HTTP代理服务器使用。</p><p><img src="https://g.asyncoder.com/images/20191029/whistle.png" alt="简介"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> whistle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者通过<code>npm taobao</code> 安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> whistle <span class="token parameter variable">-g</span> <span class="token parameter variable">--registry</span><span class="token operator">=</span>https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ w2 <span class="token parameter variable">--version</span><span class="token number">2.3</span>.0$ start <span class="token parameter variable">-p</span> <span class="token number">3333</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">]</span> whistle@2.3.0 is running<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token number">1</span>. use your device to visit the following URL list, gets the IP of the URL you can access:       http://127.0.0.1:3333/       http://192.168.31.107:3333/       Note: If all the above URLs are unable to access, check the firewall settings             For <span class="token builtin class-name">help</span> see https://github.com/avwo/whistle<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token number">2</span>. configure your device to use whistle as its HTTP and HTTPS proxy on IP:3333<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token number">3</span>. use Chrome to visit http://local.whistlejs.com/ to get started➜  ~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>设置好代理</p><p><img src="https://g.asyncoder.com/images/20191029/1.jpg" alt="设置代理"></p><ul><li>直接访问 <a href="http://localhost:3333/">http://127.0.0.1:3333</a></li><li>在设置好代理后访问 <a href="http://local.whistlejs.com/">http://local.whistlejs.com/</a></li></ul><p><img src="https://g.asyncoder.com/images/20191029/2.jpg" alt="访问效果"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><p>网络抓包是一个抓包工具的必备功能</p><p><img src="https://g.asyncoder.com/images/20191029/20.jpg" alt="抓包"></p><h3 id="设置host"><a href="#设置host" class="headerlink" title="设置host"></a>设置host</h3><p>将某个域名指向指定的ip，这样可以绕过本地DNS的解析。比如访问<a href="http://larry.dev/">http://larry.dev</a>就相当于访问<code>http://192.168.3.107</code></p><p><img src="https://g.asyncoder.com/images/20191029/3.jpg" alt="设置host"></p><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><p>可以将某个域名映射到某个ip和端口，比如访问 <a href="http://dev.asyncoder.com]">http://dev.asyncoder.com</a> 就相当于访问<code>http://192.168.3.107:3000</code>。这种场景非常适合在H5下联调微信分享等场景。</p><p><img src="https://g.asyncoder.com/images/20191029/4.jpg" alt="设置host"></p><p>访问效果： </p><p><img src="https://g.asyncoder.com/images/20191029/6.jpg" alt="ip访问"></p><p><img src="https://g.asyncoder.com/images/20191029/5.jpg" alt="域名访问"></p><h3 id="代码注入"><a href="#代码注入" class="headerlink" title="代码注入"></a>代码注入</h3><h4 id="脚本注入"><a href="#脚本注入" class="headerlink" title="脚本注入"></a>脚本注入</h4><p><img src="https://g.asyncoder.com/images/20191029/8.jpg" alt="引用脚本"></p><p><img src="https://g.asyncoder.com/images/20191029/9.jpg" alt="脚本定义"></p><p><img src="https://g.asyncoder.com/images/20191029/7.jpg" alt="脚本注入效果"></p><h4 id="样式注入"><a href="#样式注入" class="headerlink" title="样式注入"></a>样式注入</h4><p><img src="https://g.asyncoder.com/images/20191029/10.jpg" alt="引用样式"></p><p><img src="https://g.asyncoder.com/images/20191029/11.jpg" alt="样式定义"></p><p><img src="https://g.asyncoder.com/images/20191029/12.jpg" alt="样式注入效果"></p><h4 id="HTML内容注入"><a href="#HTML内容注入" class="headerlink" title="HTML内容注入"></a>HTML内容注入</h4><p><img src="https://g.asyncoder.com/images/20191029/13.jpg" alt="引用HTML文件"></p><p><img src="https://g.asyncoder.com/images/20191029/14.jpg" alt="HTML文件内容"></p><p><img src="https://g.asyncoder.com/images/20191029/15.jpg" alt="HTML注入效果"></p><h3 id="线上文件替换"><a href="#线上文件替换" class="headerlink" title="线上文件替换"></a>线上文件替换</h3><p>可以将线上的文件映射到本地， 本地文件修改后可以调试线上效果</p><p><img src="https://g.asyncoder.com/images/20191029/16.jpg" alt="线上文件注入"></p><p><img src="https://g.asyncoder.com/images/20191029/19.jpg" alt="本地文件内容"></p><p><img src="https://g.asyncoder.com/images/20191029/18.jpg" alt="线上文件注入内容"></p><p><img src="https://g.asyncoder.com/images/20191029/17.jpg" alt="线上文件注入效果"></p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>更多请参考官方文档<a href="http://wproxy.org/whistle/quickstart.html">http://wproxy.org/whistle/quickstart.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Web调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Broadcast Channel简介</title>
      <link href="/2019/07/26/broadcast-channel-jian-jie/"/>
      <url>/2019/07/26/broadcast-channel-jian-jie/</url>
      
        <content type="html"><![CDATA[<p>在前端，我们经常会用<code>postMessage</code>来实现页面间的点对点通信，对于一些需要广播（让所有页面知道）的消息，用<code>postMessage</code>无法满足需求。<a href="https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API"><code>Broadcast Channel</code></a>就用来解决这个问题</p><p><img src="https://g.asyncoder.com/20190726-1.png" alt="架构"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建广播</span><span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BroadcastChannel</span><span class="token punctuation">(</span><span class="token string">'channel'</span><span class="token punctuation">)</span><span class="token comment">// 监听广播</span>channel<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 广播事件</span>channel<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'hello message'</span><span class="token punctuation">)</span><span class="token comment">// 关闭广播</span>channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>当前firefox和google chrome已经支持， IE 和safari还不支持</p><p><img src="https://g.asyncoder.com/20190726-2.png" alt="兼容性"></p><h2 id="polyfill支持"><a href="#polyfill支持" class="headerlink" title="polyfill支持"></a>polyfill支持</h2><p>可以参考 <a href="https://gist.github.com/alexis89x/041a8e20a9193f3c47fb">github polyfill</a></p><p>polyfill原理: 所有页面都可以监听storage的事件变化</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'storage'</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">storage key changed: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token punctuation">.</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, oldValue is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token punctuation">.</span>oldValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, newValue is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token punctuation">.</span>newValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信推送</title>
      <link href="/2019/07/19/wei-xin-tui-song/"/>
      <url>/2019/07/19/wei-xin-tui-song/</url>
      
        <content type="html"><![CDATA[<h2 id="公众号推送"><a href="#公众号推送" class="headerlink" title="公众号推送"></a>公众号推送</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>微信公众号提供了接口方便进行消息推送。只要用户关注了对应的<strong>服务号</strong>， 就可以对其进行消息推送。推送的消息，支持打开网页或者打开小程序</p><p><strong>限制</strong>： 公众号推送只针对服务号，普通个人公众号是不支持推送的。必须通过认证（花钱了）才可以调用推送接口</p><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p>为了方便调用推送接口，需要先生成密钥，也就是<code>AppID</code>和<code>AppSecret</code>，前往“开发 -&gt; 基本配置” 中生成 AppSecret。主要 AppSecret 生成后需要保存起来，后续是没法在微信后台进行查看的。</p><p><img src="https://g.asyncoder.com/20190719-1.jpg" alt="生成密钥"></p><h3 id="生成-ACCESS-TOKEN"><a href="#生成-ACCESS-TOKEN" class="headerlink" title="生成 ACCESS_TOKEN"></a>生成 ACCESS_TOKEN</h3><p>在调用推送接口之前，需要先生成一个<code>ACCESS_TOKEN</code>。可以将其理解为用户登入。通过之前的<code>AppID</code>和<code>AppSecret</code>可以换取<code>ACCESS_TOKEN</code></p><p>只需要往 <code>https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=AppID&amp;secret=AppSecret</code>发送一个<code>GET</code>请求，就可以获取<code>ACCESS_TOKEN</code>。相应如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"access_token"</span><span class="token operator">:</span> <span class="token string">"23_ut_jOdU43FNnaEtNm_9SJx..."</span><span class="token punctuation">,</span>    <span class="token property">"expires_in"</span><span class="token operator">:</span> <span class="token number">7200</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成模板"><a href="#生成模板" class="headerlink" title="生成模板"></a>生成模板</h3><p>微信推模板送都由一定的格式，这个格式叫做模板。可以访问微信后台的“功能 -&gt; 模板消息”来创建模板，模板创建后，会生成一个模板 ID，这个模板 ID 会在推送接口里面用到。</p><p><img src="https://g.asyncoder.com/20190719-2.png" alt="生成推送模板"></p><p><img src="https://g.asyncoder.com/20190719-3.png" alt="模板效果"></p><h3 id="消息推送"><a href="#消息推送" class="headerlink" title="消息推送"></a>消息推送</h3><p>推送接口可以参考<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1433751277">微信官方文档</a>。</p><p>简单来说，就是往<code>https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=ACCESS_TOKEN</code>发送 POST 请求，请求参数如下所示：</p><table><thead><tr><th>参数</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>touser</td><td>是</td><td>接收者 openid</td></tr><tr><td>template_id</td><td>是</td><td>模板 ID</td></tr><tr><td>url</td><td>否</td><td>模板跳转链接（海外帐号没有跳转能力）</td></tr><tr><td>miniprogram</td><td>否</td><td>跳小程序所需数据，不需跳小程序可不用传该数据</td></tr><tr><td>appid</td><td>是</td><td>所需跳转到的小程序 appid（该小程序 appid 必须与发模板消息的公众号是绑定关联关系，暂不支持小游戏）</td></tr><tr><td>pagepath</td><td>否</td><td>所需跳转到小程序的具体页面路径，支持带参数,（示例 index?foo=bar），要求该小程序已发布，暂不支持小游戏</td></tr><tr><td>data</td><td>是</td><td>模板数据</td></tr><tr><td>color</td><td>否</td><td>模板内容字体颜色，不填默认为黑色</td></tr></tbody></table><p>推送 URL 传递 json 如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"touser"</span><span class="token operator">:</span> <span class="token string">"o_rbq1TOgERuflYd7PsiE9H565Oo"</span><span class="token punctuation">,</span>    <span class="token property">"template_id"</span><span class="token operator">:</span> <span class="token string">"n44_YbDNEqrrSEEvd8The8HpWYo1gWOVAXj7zIz4vHA"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"remark"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"不积跬步无以至千里，加油！"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"keyword3"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"2019-06-09"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"first"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"石头同学，提醒您背单词啦"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"keyword1"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"巅峰单词800个背诵"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"keyword2"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"今日背诵单词任务未完成"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推送小程序传递 json 如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"touser"</span><span class="token operator">:</span> <span class="token string">"o_rbq1TOgERuflYd7PsiE9H565Oo"</span><span class="token punctuation">,</span>    <span class="token property">"template_id"</span><span class="token operator">:</span> <span class="token string">"n44_YbDNEqrrSEEvd8The8HpWYo1gWOVAXj7zIz4vHA"</span><span class="token punctuation">,</span>    <span class="token property">"miniprogram"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"appid"</span><span class="token operator">:</span> <span class="token string">"wx2210554e092c3f99"</span><span class="token punctuation">,</span>        <span class="token property">"pagepath"</span><span class="token operator">:</span> <span class="token string">"pages/index/index"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"remark"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"不积跬步无以至千里，加油！"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"keyword3"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"2019-06-09"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"first"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"石头同学，提醒您背单词啦"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"keyword1"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"巅峰单词800个背诵"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"keyword2"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"今日背诵单词任务未完成"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小程序推送"><a href="#小程序推送" class="headerlink" title="小程序推送"></a>小程序推送</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>和公众号类似， 小程序支持给用户下发服务通知。</p><p><strong>限制</strong>： 必须通过认证（花钱了）才可以调用推送接口</p><h3 id="生成密钥-1"><a href="#生成密钥-1" class="headerlink" title="生成密钥"></a>生成密钥</h3><p>和微信公众号类似，需要先生成密钥，也就是<code>AppID</code>和<code>AppSecret</code>，前往“开发 -&gt; 开发设置” 中生成 AppSecret。主要 AppSecret 生成后需要保存起来，后续是没法在微信后台进行查看的。</p><h3 id="生成-ACCESS-TOKEN-1"><a href="#生成-ACCESS-TOKEN-1" class="headerlink" title="生成 ACCESS_TOKEN"></a>生成 ACCESS_TOKEN</h3><p>和公众号一样，也是往<code>https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=AppID&amp;secret=AppSecret</code>发送一个<code>GET</code>请求，就可以获取<code>ACCESS_TOKEN</code>。</p><h3 id="生成模板-1"><a href="#生成模板-1" class="headerlink" title="生成模板"></a>生成模板</h3><p>和公众号类似， 小程序推送也需要模板。需要前往“功能 -&gt; 模板消息”中生成模板</p><h3 id="消息推送-1"><a href="#消息推送-1" class="headerlink" title="消息推送"></a>消息推送</h3><p>推送接口可以参考<a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/template-message/templateMessage.send.html">微信官方文档</a>。</p><p>简单来说，就是往<code>https://api.weixin.qq.com/cgi-bin/message/wxopen/template/send?access_token=ACCESS_TOKEN</code>发送 POST 请求，请求参数如下所示：</p><table><thead><tr><th>参数</th><th>类型</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>access_token</td><td>string</td><td>是</td><td>接口调用凭证</td></tr><tr><td>touser</td><td>string</td><td>是</td><td>接收者（用户）的 openid</td></tr><tr><td>template_id</td><td>string</td><td>是</td><td>所需下发的模板消息的 id</td></tr><tr><td>page</td><td>string</td><td>否</td><td>点击模板卡片后的跳转页面，仅限本小程序内的页面。支持带参数,（示例 index?foo=bar）。该字段不填则模板无跳转。</td></tr><tr><td>form_id</td><td>string</td><td>是</td><td>表单提交场景下，为 submit 事件带上的 formId；支付场景下，为本次支付的 prepay_id</td></tr><tr><td>data</td><td>Object</td><td>否</td><td>模板内容，不填则下发空模板。具体格式请参考示例。</td></tr><tr><td>emphasis_keyword</td><td>string</td><td>否</td><td>模板需要放大的关键词，不填则默认无放大</td></tr></tbody></table><p>注意参数中的<code>form_id</code>， 它只有在用户发生支付行为 或者用户主动提交了表单后，才会生成。如果想多次进行消息推送，需要搜集用户的<code>form_id</code>信息</p><p>一个典型的获取<code>form_id</code>的代码如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">bindsubmit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>formSubmit<span class="token punctuation">"</span></span> <span class="token attr-name">bindreset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>formReset<span class="token punctuation">"</span></span> <span class="token attr-name">report-submit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">form-type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function-variable function">formSubmit</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'form发生了submit事件，formId为：'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>formId<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推送小程序传递 json 如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"access_token"</span><span class="token operator">:</span> <span class="token string">"21_2HPTNjvIKFLhVTSI5t9eF..."</span><span class="token punctuation">,</span> <span class="token comment">// 访问 access_token</span>    <span class="token property">"touser"</span><span class="token operator">:</span> <span class="token string">"ogYQ75G33BMpuKOjKjIIOiFP7cF4"</span><span class="token punctuation">,</span> <span class="token comment">// 小程序用户的 openId</span>    <span class="token property">"template_id"</span><span class="token operator">:</span> <span class="token string">"-SvDCjf6VG7lGAITKmdhHp6ZBQx1huJdBMO9hFAgI0w"</span><span class="token punctuation">,</span>    <span class="token property">"page"</span><span class="token operator">:</span> <span class="token string">"pages/index/index"</span><span class="token punctuation">,</span>    <span class="token property">"form_id"</span><span class="token operator">:</span> <span class="token string">"b7ed924575c449a080bb140e90a6f326"</span><span class="token punctuation">,</span> <span class="token comment">// form_id</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"keyword1"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"石头"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"keyword2"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"2019年5月18日 13:00 - 15:00"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"keyword3"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"雅思学习（第二课时）"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"keyword4"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"学习成就未来，每一步都是成长"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在微信H5网页中获取用户基本信息</title>
      <link href="/2018/09/21/zai-wei-xin-h5-wang-ye-zhong-huo-qu-yong-hu-ji-ben-xin-xi/"/>
      <url>/2018/09/21/zai-wei-xin-h5-wang-ye-zhong-huo-qu-yong-hu-ji-ben-xin-xi/</url>
      
        <content type="html"><![CDATA[<p>在微信中访问一些HTML5网页时，我们常看到是否允许访问用户公开信息的提示。如果用户点击“允许”，网页就可以获取到用户的头像以及昵称等信息。</p><p><img src="https://g.asyncoder.com/20180921-01.jpg?imageView2/0/w/500/" alt="微信授权提示"></p><p>如果把在网址拷贝出来，然后在非微信环境打开，就会看到“请在微信客户端中打开连接”的提示。</p><p><img src="https://g.asyncoder.com/20180921-02.jpg?imageView2/0/w/500/" alt="在微信内部访问提示"></p><p>一直很好奇这个是怎么实现的，是微信提供的功能呢还是开发人员自己实现的？从页面展示的效果来看，应该是微信提供的功能。如果是微信提供的功能，该怎么样实现这样的效果呢？刚好我们有个H5网页需要获取用户的昵称信息，研究了下微信的相关文档，整理为此文。</p><h2 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h2><p>首先，获取用户的昵称属于微信H5开发中的“高级功能”，所谓“高级功能”，就是微信收费的内容。开发人员必须进行公众号认证才可以使用。所以想玩转本文，先向微信上缴300大洋吧。很崩溃是不是？没办法，微信就是这么强大。认证成功后，就可以调用相关接口获取用户的基本信息了。相关文档可以直接访问 <a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842</a></p><h2 id="页面授权"><a href="#页面授权" class="headerlink" title="页面授权"></a>页面授权</h2><p>在前文我们看到过一个微信授权提示的页面，这个页面其实是微信自动弹出的。当用户点击“允许”后，应用才可以获取到用户的基本信息。那么问题来了，怎么让微信弹出这个授权提示页面呢？其实很简单，只需要访问微信特定的一个网址即可。如下代码所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">redirectToAuthPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> callbackURL <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://pk.xxx.cn/pk/wechat/getUserInfoCallback</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token string">'/pk/page/teachersday/index.html'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> wechatId <span class="token operator">=</span> <span class="token string">'wx116c7ab3d519b006'</span>    <span class="token keyword">const</span> redirectURI <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://open.weixin.qq.com/connect/oauth2/authorize?appid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>wechatId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;redirect_uri=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>callbackURL<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>state<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">#wechat_redirect</span><span class="token template-punctuation string">`</span></span>    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> redirectURI<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说只要我们访问诸如 <strong><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx116c7ab3d519b006&amp;redirect_uri=https://pk.xxx.cn/pk/wechat/getUserInfoCallback&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=/abc">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx116c7ab3d519b006&amp;redirect_uri=https://pk.xxx.cn/pk/wechat/getUserInfoCallback&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=/abc</a></strong> 等地址，微信就会自动弹出授权提示。如果不是在微信客户端内部访问，就提示“请在微信客户端中打开连接”。</p><p>这里网址里面有几个需要主要的参数：</p><ol><li><strong>appid</strong>  开发者ID，公众号的唯一标识，在微信公众号里面左侧菜“基本配置”里面可以看到</li><li><strong>redirect_uri</strong>  授权后重定向的回调链接地址，官方要求用urlEncode对链接进行处理</li><li><strong>state</strong> 重定向后会带上state参数，最多128字节</li></ol><p>前两个参数是必须填写的，最后一个可以忽略。但是开发时state会很有用，可以传入一些辅助信息。比如在我们的页面中，授权成功后我们会通过state来让后台进行页面跳转。</p><p>回到上面那个URL地址，当用户在微信里面访问后，首先会弹出授权提示，如果用户点击“允许”，页面会自动重定向到<a href="https://pk.xxx.cn/pk/wechat/getUserInfoCallback?code=xxxxxx&amp;state=/abc">https://pk.xxx.cn/pk/wechat/getUserInfoCallback?code=xxxxxx&amp;state=/abc</a>。</p><p>注意这里的<strong>code</strong>，它用于在微信中获取access_token，通过access_token调用其他API才可以获取用户的基本信息</p><h2 id="通过code换取access-token"><a href="#通过code换取access-token" class="headerlink" title="通过code换取access_token"></a>通过code换取access_token</h2><p>拿到code后，可以通过code来换取access_token, 如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://api.weixin.qq.com/sns/oauth2/access_token?appid<span class="token operator">=</span>wx116c7ab3d519b006<span class="token operator">&amp;</span><span class="token assign-left variable">secret</span><span class="token operator">=</span>SECRET_CODE<span class="token operator">&amp;</span><span class="token assign-left variable">code</span><span class="token operator">=</span>xxxxxx<span class="token operator">&amp;</span><span class="token assign-left variable">grant_type</span><span class="token operator">=</span>authorization_code<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>secret</code>为开发者密钥，第一次创建密钥时微信会提示我们保存。</p></blockquote><p>返回如下结果：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"access_token"</span><span class="token operator">:</span><span class="token string">"13_wNUT-XFU2d4TYuBRt98"</span><span class="token punctuation">,</span>    <span class="token property">"expires_in"</span><span class="token operator">:</span><span class="token number">7200</span><span class="token punctuation">,</span>    <span class="token property">"refresh_token"</span><span class="token operator">:</span><span class="token string">"13__46yGQMYzwe2"</span><span class="token punctuation">,</span>    <span class="token property">"openid"</span><span class="token operator">:</span><span class="token string">"og7kR1WU05l0hUYpGtQAZNHYJSzE"</span><span class="token punctuation">,</span>    <span class="token property">"scope"</span><span class="token operator">:</span><span class="token string">"snsapi_userinfo"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通过access-token获取用户基本信息"><a href="#通过access-token获取用户基本信息" class="headerlink" title="通过access_token获取用户基本信息"></a>通过access_token获取用户基本信息</h2><p>拿到access_token后，就可以获取用户的基本信息了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://api.weixin.qq.com/sns/userinfo?access_token<span class="token operator">=</span>13_wNUT-XFU2d4TYuBRt98<span class="token operator">&amp;</span><span class="token assign-left variable">openid</span><span class="token operator">=</span>og7kR1WU05l0hUYpGtQAZNHYJSzE<span class="token operator">&amp;</span><span class="token assign-left variable">lang</span><span class="token operator">=</span>zh_CN <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回如下结果：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"openid"</span><span class="token operator">:</span><span class="token string">"og7kR1WU05l0hUYpGtQAZNHYJSzE"</span><span class="token punctuation">,</span>    <span class="token property">"nickname"</span><span class="token operator">:</span><span class="token string">"石头"</span><span class="token punctuation">,</span>    <span class="token property">"sex"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"language"</span><span class="token operator">:</span><span class="token string">"zh_CN"</span><span class="token punctuation">,</span>    <span class="token property">"city"</span><span class="token operator">:</span><span class="token string">"成都"</span><span class="token punctuation">,</span>    <span class="token property">"province"</span><span class="token operator">:</span><span class="token string">"四川"</span><span class="token punctuation">,</span>    <span class="token property">"country"</span><span class="token operator">:</span><span class="token string">"中国"</span><span class="token punctuation">,</span>    <span class="token property">"headimgurl"</span><span class="token operator">:</span> <span class="token string">"http://thirdwx.qlogo.cn/mmopen/g3MonUZtNHkdmzicIlibx6iaFqAc56vxLSUfpb6n5WKSYVY0ChQKkiaJSgQ1dZuTOgvLLrhJbERQQ4eMsv84eavHiaiceqxibJxCfHe/46"</span><span class="token punctuation">,</span>    <span class="token property">"privilege"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="跳转到H5页面"><a href="#跳转到H5页面" class="headerlink" title="跳转到H5页面"></a>跳转到H5页面</h2><p>后台获取到用户的昵称后，可以通过读取<code>redirect_uri</code>里面的<code>state</code>参数来跳转到前端H5页面，比如跳转到<a href="https://pk.xxx.cn/test/pk/page/teachersday/index.html?nickName=%E7%9F%B3%E5%A4%B4">https://pk.xxx.cn/test/pk/page/teachersday/index.html?nickName=石头</a>，前端页面就可以很方便的获取到用户的昵称信息。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>公众号必须要通过认证，否则无法获取用户基本信息。</li><li>公众号需要到“安全中心”设置好白名单，比如后端服务器的外网IP地址，否则没法访问微信接口</li><li>公众号需要设置好<code>JS接口安全域名</code>和<code>回调域名</code></li></ol><p>以上都配置OK了，才可以正常的调用微信的JS SDK以及获取用户的公开基本信息</p><p>针对后台开发同学，通过<code>code</code>换取的<code>access_token</code>是有时效限制的，大约2个小时会失效。需要通过接口返回的<code>refresh_token</code>来获取新的<code>access_token</code>。<code>refresh_token</code>的有效期为30天。如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://api.weixin.qq.com/sns/oauth2/refresh_token?appid<span class="token operator">=</span>wx116c7ab3d519b006<span class="token operator">&amp;</span><span class="token assign-left variable">grant_type</span><span class="token operator">=</span>refresh_token<span class="token operator">&amp;</span><span class="token assign-left variable">refresh_token</span><span class="token operator">=</span>13__46yGQMYzwe2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回如下数据：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>     <span class="token property">"access_token"</span><span class="token operator">:</span><span class="token string">"ACCESS_TOKEN"</span><span class="token punctuation">,</span>    <span class="token property">"expires_in"</span><span class="token operator">:</span><span class="token number">7200</span><span class="token punctuation">,</span>    <span class="token property">"refresh_token"</span><span class="token operator">:</span><span class="token string">"REFRESH_TOKEN"</span><span class="token punctuation">,</span>    <span class="token property">"openid"</span><span class="token operator">:</span><span class="token string">"og7kR1WU05l0hUYpGtQAZNHYJSzE"</span><span class="token punctuation">,</span>    <span class="token property">"scope"</span><span class="token operator">:</span><span class="token string">""</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，微信还提供了一个API接口来校验<code>access_token</code>是否有效。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://api.weixin.qq.com/sns/auth?access_token<span class="token operator">=</span>ACCESS_TOKEN<span class="token operator">&amp;</span><span class="token assign-left variable">openid</span><span class="token operator">=</span>og7kR1WU05l0hUYpGtQAZNHYJSzE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果<code>access_token</code>有效，则返回如下数据，否则会提示错误信息：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>     <span class="token property">"errcode"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"errmsg"</span><span class="token operator">:</span><span class="token string">"ok"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果数据不合法，会返回其他信息：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"errcode"</span><span class="token operator">:</span><span class="token number">40013</span><span class="token punctuation">,</span>    <span class="token property">"errmsg"</span><span class="token operator">:</span><span class="token string">"invalid appid"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇小文主要介绍了在微信HTML5网页中通过授权提示的方式获取用户的基本信息。该功能需要微信公众号进行认证方可使用，同时需要配置好相应的白名单IP和回调域名。希望对大家的开发有所帮助。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Golang玩转WebAssembly</title>
      <link href="/2018/08/27/li-yong-golang-wan-zhuan-webassembly/"/>
      <url>/2018/08/27/li-yong-golang-wan-zhuan-webassembly/</url>
      
        <content type="html"><![CDATA[<p>WebAssembly，也叫WAMS，是一个可移植、体积小、加载快并且兼容 Web 的全新二进制格式，可以将C/C++/Rust等语言编写的代码编译为wasm文件然后运行在Web上。</p><p>用C/C++写wasm有点麻烦，需要安装各种编译器。话说最新<a href="https://blog.golang.org/go1.11">Go 1.11</a>发布了，其中有个新特性就是对WebAssembly的支持，今天我们就来玩玩，如何将Go代码编译为wasm文件。</p><p><em>提示：本文不会介绍Go的相关语法以及WASM的相关基础知识。如果阅读有困难，请先参考相关的基础介绍或阅读相关文章。</em></p><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>环境安装就不多说了，直接参考<a href="https://golang.org/doc/install.html">官方安装文档</a>就行，然后配置好对应的环境变量即可。例如在windows上，运行如下命令OK，就说明都正常了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token operator">&gt;</span>go versiongo version go1.11 windows/amd64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="来个栗子🌰"><a href="#来个栗子🌰" class="headerlink" title="来个栗子🌰"></a>来个栗子🌰</h2><p>先建立一个<code>main.go</code>的文件，内容如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, WebAssembly!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码很简单，就是程序运行后直接在控制台输出<code>Hello, WebAssembly!</code></p><p>然后进入控制台（windows上需要先进入git bash），输入如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>wasm <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>js go build <span class="token parameter variable">-o</span> test.wasm main.go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这句话的意思是，切换Go的编译架构为wasm，运行的的对象为Javascript引擎，然后源码为<code>main.go</code>，最后输出为<code>test.wasm</code>这个二进制文件</p><p>生成的<code>test.wasm</code>需要加载到浏览器中才可以使用，为了方便使用，Go已经提供了默认的加载样例和脚本，可以通过把脚本和样例复制一下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token variable"><span class="token variable">$(</span>go <span class="token function">env</span> GOROOT<span class="token variable">)</span></span>/misc/wasm/wasm_exec.<span class="token punctuation">{</span>html,js<span class="token punctuation">}</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的意思是把Go安装目录下的<code>wasm_exec.html</code>和<code>wasm_exec.js</code>复制到当前文件夹。一切就绪后，我们用<code>http-server</code>（可以通过npm install http-server来安装）启动一个Web服务器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http-server <span class="token parameter variable">-c</span> <span class="token number">0</span> <span class="token parameter variable">-p</span> <span class="token number">2000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问 <a href="http://localhost:2000/wasm_exec.html">http://localhost:2000/wasm_exec.html</a>并打开控制台，会看到如下内容：</p><pre class="line-numbers language-none"><code class="language-none">Hello, WebAssembly!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="深入样例"><a href="#深入样例" class="headerlink" title="深入样例"></a>深入样例</h2><p>直接显示Hello world之类的提示不好玩，我们能否调用下Go里面的方法呢？ 答案是可以的。我们首先修改下<code>wasm_exec.html</code>，改成如下内容：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Go wasm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wasm_exec.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>WebAssembly<span class="token punctuation">.</span>instantiateStreaming<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// polyfill</span>WebAssembly<span class="token punctuation">.</span><span class="token function-variable function">instantiateStreaming</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resp<span class="token punctuation">,</span> importObject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> resp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">await</span> WebAssembly<span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> importObject<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> go <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> mod<span class="token punctuation">,</span> instWebAssembly<span class="token punctuation">.</span><span class="token function">instantiateStreaming</span><span class="token punctuation">(</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"test.wasm"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> go<span class="token punctuation">.</span>importObject<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">async</span> <span class="token parameter">result</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>mod <span class="token operator">=</span> result<span class="token punctuation">.</span>moduleinst <span class="token operator">=</span> result<span class="token punctuation">.</span>instance<span class="token keyword">await</span> go<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>inst<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">wamsCallback</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">wasm output: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来修改下<code>main.go</code>，加入如下代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"syscall/js"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">calFib</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>a <span class="token operator">:=</span> <span class="token number">0</span>b <span class="token operator">:=</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">}</span><span class="token keyword">return</span> b<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">fib</span><span class="token punctuation">(</span>params <span class="token punctuation">[</span><span class="token punctuation">]</span>js<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token punctuation">{</span>value <span class="token operator">:=</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span>value <span class="token operator">=</span> <span class="token function">calFib</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token comment">// 当前Go和wasm交互，wasm没法直接获得函数的返回值，调用window.wamsCallback(value)或者直接window.output获取</span>    <span class="token comment">// window.wamsCallback为用户在Javascript中自定义的函数，也就是一个回调函数</span>js<span class="token punctuation">.</span><span class="token function">Global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>js<span class="token punctuation">.</span><span class="token function">Global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">"wamsCallback"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment">// 将Go里面的方法注入到window.fibNative里面</span><span class="token keyword">func</span> <span class="token function">registerCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>js<span class="token punctuation">.</span><span class="token function">Global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"fibNative"</span><span class="token punctuation">,</span> js<span class="token punctuation">.</span><span class="token function">NewCallback</span><span class="token punctuation">(</span>fib<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">registerCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中，我们在Go中增加了一个计算斐波那契数列的方法，并在Go中通过<code>registerCallbacks</code>这个方法注入到浏览器里面。<code>js.Global()</code>表示获取宿主环境的window（浏览器）或者global（Node.js）。<code>Call</code>表示调用对应的方法。所以wasm成功加载到浏览器中后，我们可以通过<code>window.fibNative</code>这个函数来访问Go中的<code>fib</code>方法。</p><p>Go现在对wasm的支持属于试验阶段，相关API还不完善，我们现在还没法直接获得返回值。在代码中，我们可以将返回值通过<code>js.Global().Set("output", value)</code>将计算的返回值直接写到<code>window.output</code>里面，或者调用我们页面中已有的函数。</p><p>在Chrome控制台，我们可以得到这样的结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hello, WebAssembly<span class="token operator">!</span><span class="token operator">&gt;</span> window.fibNative<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>wasm_exec.html:28 wasm output: <span class="token number">3</span><span class="token operator">&gt;</span> window.output<span class="token number">3</span><span class="token operator">&gt;</span> window.fibNative<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>wasm_exec.html:28 wasm output: <span class="token number">1346269</span><span class="token operator">&gt;</span> window.output<span class="token number">1346269</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Go中，通过<code>syscall/js</code>这个官方提供的开发库还是可以调用页面中的DOM并操作，例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"syscall/js"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">changeBodyColor</span><span class="token punctuation">(</span>color <span class="token punctuation">[</span><span class="token punctuation">]</span>js<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// document.body.style.color = color</span>js<span class="token punctuation">.</span><span class="token function">Global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"document"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"style"</span><span class="token punctuation">,</span> <span class="token string">"color:"</span><span class="token operator">+</span>color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">setInputValue</span><span class="token punctuation">(</span>val <span class="token punctuation">[</span><span class="token punctuation">]</span>js<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token punctuation">{</span>id <span class="token operator">:=</span> val<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// document.getElementById(id).value = "value from Go"</span>js<span class="token punctuation">.</span><span class="token function">Global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"document"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">"getElementById"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span> <span class="token string">"value from Go"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 将Go里面的方法注入到window.fibNative里面</span><span class="token keyword">func</span> <span class="token function">registerCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>js<span class="token punctuation">.</span><span class="token function">Global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"changeBodyColor"</span><span class="token punctuation">,</span> js<span class="token punctuation">.</span><span class="token function">NewCallback</span><span class="token punctuation">(</span>changeBodyColor<span class="token punctuation">)</span><span class="token punctuation">)</span>js<span class="token punctuation">.</span><span class="token function">Global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"setInputValue"</span><span class="token punctuation">,</span> js<span class="token punctuation">.</span><span class="token function">NewCallback</span><span class="token punctuation">(</span>setInputValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">registerCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新编译为wasm后，可以通过<code>window.changeBodyColor("red")</code> 和 <code>setInputValue("name")</code>来切换页面颜色以及给文本框一个默认值。</p><p>再来一个计算数组和的样例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"syscall/js"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>params <span class="token punctuation">[</span><span class="token punctuation">]</span>js<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token punctuation">{</span>result <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> params <span class="token punctuation">{</span>result <span class="token operator">+=</span> value<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>js<span class="token punctuation">.</span><span class="token function">Global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">"wamsCallback"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">registerCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>js<span class="token punctuation">.</span><span class="token function">Global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"sumNative"</span><span class="token punctuation">,</span> js<span class="token punctuation">.</span><span class="token function">NewCallback</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, WebAssembly!"</span><span class="token punctuation">)</span><span class="token function">registerCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，我们可以通过<code>window.sumNative(1, 2,3)</code>来调用Go的计算和的方法</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上是在Go中使用wasm的基本方法。当前Go对wasm的支持还属于实验阶段，官方也提到现在提供的API也不多，重要用于测试和验证。还有就是，当前的wasm二进制文件大小大约为1.2Mb左右，比于C生成的wasm要大不少，主要是里面包含的Go的一些运行时，所以会大点。以后也许会优化。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/golang/go/wiki/WebAssembly">Go中的WebAssembly</a></li><li><a href="https://www.youtube.com/watch?v=4kBvvk2Bzis">Go WebAssembly Tutorial - Building a Calculator</a></li><li><a href="https://github.com/Chyroc/golang-wasm-example">golang-wasm-example</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WASM </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次Vue中的v-for踩坑之旅</title>
      <link href="/2018/07/20/ji-yi-ci-vue-zhong-de-v-for-cai-keng-zhi-lu/"/>
      <url>/2018/07/20/ji-yi-ci-vue-zhong-de-v-for-cai-keng-zhi-lu/</url>
      
        <content type="html"><![CDATA[<p>用过Vue的同学都知道，<code>v-for</code>指令常用于遍历数组或者对象，然后依次渲染出指定的内容。同时，我们也知道，官方文档也建议，在使用<code>v-for</code>指令时，记得要加上<code>key</code>属性，方便提升应用性能。例如一个简单的增删Todo应用如下所示：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todos<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.trim</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>task<span class="token punctuation">"</span></span> <span class="token attr-name">@keypress.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onSaveTodo<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入待办任务<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(todo, index) in todos<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onRemoveTodo(index)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ todo }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>remove<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token entity named-entity" title="×">&amp;times;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'TodoApp'</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">task</span><span class="token operator">:</span> <span class="token string">''</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">onSaveTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>task<span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>task <span class="token operator">=</span> <span class="token string">''</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">onRemoveTodo</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.todos .remove</span> <span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> #ff0000<span class="token punctuation">;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p data-height="400" data-theme-id="0" data-slug-hash="wjNxoP" data-default-tab="js" data-user="flyingzl" data-embed-version="2" data-pen-title="vue-v-for" data-preview="true" class="codepen">See the Pen <a href="https://codepen.io/flyingzl/pen/wjNxoP/">vue中v-for使用</a></p><script async="" src="https://static.codepen.io/assets/embed/ei.js"></script><p>代码很简单明了，也运行的很高效。我们用了<code>v-for</code>指令，也加了<code>key</code>, 一切都和完美，感叹Vue真好用，真是高效哇！</p><h2 id="组件封装"><a href="#组件封装" class="headerlink" title="组件封装"></a>组件封装</h2><p>在Vue中，官方建议我们多进行组件封装和抽象，这样方便后期维护。因为每一个Todo都有自己的状态，例如完成或者未完成， 我们需要将每一个Todo抽象为组件。所以我们要做一下简单的改进：新建一个<code>TodoItem.vue</code>，然后在主文件中导入使用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-item<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{checked: checked}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>label<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onRemoveItem<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ todo }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>remove<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token entity named-entity" title="×">&amp;times;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'TodoItem'</span>    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">todo</span><span class="token operator">:</span> String    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token literal-property property">checked</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">onRemoveItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'remove'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">.todo-item.checked .label</span> <span class="token punctuation">{</span>        <span class="token property">text-decoration</span><span class="token punctuation">:</span> line-through<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码非常简单，我们在<code>TodoItem.vue</code>中新增加了一个<code>checked</code>属性，当复选框勾选后，todo文字会显示删除效果。重新修改下主文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todos<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.trim</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>task<span class="token punctuation">"</span></span> <span class="token attr-name">@keypress.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onSaveTodo<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入待办任务<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(todo, index) in todos<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-item</span> <span class="token attr-name">:todo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo<span class="token punctuation">"</span></span> <span class="token attr-name">@remove</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onRemoveTodo(index)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-item</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">import</span> TodoItem <span class="token keyword">from</span> <span class="token string">'./TodoItem'</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'TodoApp'</span><span class="token punctuation">,</span>        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>            TodoItem        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">task</span><span class="token operator">:</span> <span class="token string">''</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">onSaveTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>task<span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>task <span class="token operator">=</span> <span class="token string">''</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">onRemoveTodo</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.todos .remove</span> <span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> #ff0000<span class="token punctuation">;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码变化不大，只是在<code>v-for</code>循环时加入了<code>&lt;todo-item&gt;&lt;/todo-item&gt;</code>而已。看看运行效果</p><p data-height="500" data-theme-id="0" data-slug-hash="JBbaeR" data-default-tab="js,result" data-user="flyingzl" data-embed-version="2" data-pen-title="vue中v-for使用（组建嵌套）" data-preview="true" class="codepen">See the Pen <a href="https://codepen.io/flyingzl/pen/JBbaeR/">vue中v-for使用（组建嵌套）</a></p><p><img src="https://g.asyncoder.com/20180720-01.png"></p><p>好像没啥问题？ 但是如果我们增加两条数据，将第一条记录勾选后然后再删除，令人费解的事情发生了：</p><p><img src="https://g.asyncoder.com/20180720-02.png"></p><p>可以清晰地看到，第二条记录之前是未勾选状态，但是删除第一条后，它变成了勾选状态？这是为什么呢？</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>这个问题其实我现实项目中的一个抽象，当时我也遇到了类似的问题，想了好几个小时都没解决。我一行一行分析我的代码，是不是代码哪里写错了？最后一行一行分析，突然想到是不是<code>key</code>用的不对？于是我将<code>key</code>弄成一个唯一的id，然后奇迹发生了，页面都正常了。这是为什么呢？</p><p>在我们的例子，如果我们我们将<code>v-for</code>中的<code>key</code>改成如下所示（保证todo不重复）问题就解决了：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 为了演示访问表，假设todo是永不相同的  --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(todo, index) in todos<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onRemoveTodo(index)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ todo }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>remove<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token entity named-entity" title="×">&amp;times;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然当时问题是解决了，但是这个<code>v-for</code>的问题一直在困扰我，到底是什么原因导致这种现象发生，为什么<code>key</code>弄成唯一的id就好使了呢？官方说在<code>v-for</code>时增加<code>key</code>可以提升应用性能，到底是怎么提升的？ </p><p>刚好最近在看Vue Virtual DOM的diff算法，终于从中间找到了解决该问题的曙光</p><h2 id="Vue中的Virtual-DOM"><a href="#Vue中的Virtual-DOM" class="headerlink" title="Vue中的Virtual DOM"></a>Vue中的Virtual DOM</h2><p>在Vue中，<code>template</code>中的内容最后都会被解析并渲染为<a href="https://github.com/answershuto/learnVue/blob/master/docs/VNode%E8%8A%82%E7%82%B9.MarkDown">VNode</a>, 这个就是所谓的Virtual DOM。当我们修改Vue中的数据后，Vue会对前后两次的VNode进行diff，找出最小的差异，然后再渲染DOM，这样可以提高应用的性能。</p><p>VNode其实是对真实DOM的Javascript抽象，例如一个简答的DOM树如下所示：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>hello,VNode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在VNode中，会这样进行展示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'div'</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'test'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'span'</span><span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'demo'</span>            <span class="token punctuation">}</span>            <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'hello,VNode'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说，VNode可以真实描述并还原DOM。</p><h2 id="Virtual-DOM-diff算法"><a href="#Virtual-DOM-diff算法" class="headerlink" title="Virtual DOM diff算法"></a>Virtual DOM diff算法</h2><blockquote><p>Vue中的Virtual DOM diff算法比较复杂，一言两语无法描述清楚。由于网上已经有很多文章，我这里只针对<code>v-for</code>问题进行针对性解释。</p></blockquote><p>我们先看看diff的核心函数（这些是源码的抽象，源码里面更为复杂）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">patch</span> <span class="token punctuation">(</span><span class="token parameter">oldVNode<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> parentElm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldVnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">addVnodes</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">removeVnodes</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> oldVnode<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> oldVnode<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">removeVnodes</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> oldVnode<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> oldVnode<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">addVnodes</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>patch</code>就是比较前后两个<code>VNode</code>，然后找出其最小差异并修改、创建或者删除DOM。在该函数中，<code>oldVNode</code>代表旧的数据，<code>vnode</code>代表最新的数据。比较时，会进行深度优先逐层进行比较。如下图所示：</p><p><img src="https://g.asyncoder.com/20180720-04.png"><br><img src="https://g.asyncoder.com/20180720-05.png"></p><p>也就是说，在上图中，只有相同颜色的VNode才进行比较，这样算法复杂度就比较低，整体下来只有O(n)，效率算法非常高了。</p><p>从<code>patch</code>函数可以看出，diff算法的的核心逻辑是这样的：</p><ul><li>如果旧的VNode不存在，新的VNode存在，则创建新的DOM</li><li>如果旧的VNode存在，新的VNode不存在，则删除旧的DOM</li><li>如果新旧两个VNode都存在并相同，则找出最小差异然后更新DOM</li><li>如果新旧两个VNode都存但不相同，则将旧的DOM删除，然后创建新的DOM</li></ul><p>这里的关键是：如何判断两个<code>VNode</code>相同呢？请看下面的代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sameInputType</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>tag <span class="token operator">!==</span> <span class="token string">'input'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token keyword">let</span> i    <span class="token keyword">const</span> typeA <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> a<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i<span class="token punctuation">.</span>type    <span class="token keyword">const</span> typeB <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> b<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i<span class="token punctuation">.</span>type    <span class="token keyword">return</span> typeA <span class="token operator">===</span> typeB<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">sameVnode</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        a<span class="token punctuation">.</span>key <span class="token operator">===</span> b<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span>        a<span class="token punctuation">.</span>tag <span class="token operator">===</span> b<span class="token punctuation">.</span>tag <span class="token operator">&amp;&amp;</span>        a<span class="token punctuation">.</span>isComment <span class="token operator">===</span> b<span class="token punctuation">.</span>isComment <span class="token operator">&amp;&amp;</span>        <span class="token operator">!</span><span class="token operator">!</span>a<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token operator">!</span><span class="token operator">!</span>b<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span>        <span class="token function">sameInputType</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说，只有当&nbsp;key、&nbsp;tag、&nbsp;isComment（是否为注释节点）相同、&nbsp;data同时定义（或不定义），同时满足当标签类型为input的时候type相同，那么它们就是相同的VNode。</p><p>注意这里的<strong>key</strong>相同，才代表VNode相同。对比我们之前出错的样例，因为我们的key是索引号，可知第一条记录的索引号为0。当第一条记录被删除后，第二条记录的key的索引号会从1变为0，这样导致了两者的key相同。因为key相同时，diff算法会认为它们是相同的VNode，那么旧的VNode（如果VNode是一个组件，它有一个componentInstance指向Vue实例）指向的Vue实例会被复用，导致显示出错。修改key为唯一id时，根据上文<code>patch</code>函数的逻辑，旧的VNode所对应的DOM会被干掉，然后得新的DOM会被创建。因为是新创建的DOM，那么对应的Vue也是新创建的，一切就会显示正常。</p><p>所以，保证<code>key</code>唯一，就可以解决组件出错的问题。</p><p>上文中，我们没有提到diff算法的核心，也就是说当两个VNode相同时，<code>patchVnode</code>是怎么实现的。建议大家阅读相关参考文章。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>v-for</code>使用非常简单，但是要特别注意<code>key</code>的使用。官方之所以说加上<code>key</code>会提升应用性能是因为：<code>key</code>相同时，两个VNode会相同，可以避免不必要的DOM更新。而且在diff内部，也会根据<code>key</code>来跟踪VNode。但是，官方也说了，尽量保证<code>key</code>是唯一的id，这样可以避免一些匪夷所思的bug。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="https://github.com/answershuto/learnVue/blob/master/docs/VirtualDOM%E4%B8%8Ediff(Vue%E5%AE%9E%E7%8E%B0).MarkDown">VirtualDOM与diff(Vue实现).MarkDown</a></p></li><li><p><a href="https://github.com/answershuto/VueDemo/blob/master/%E3%80%8A%E6%95%B0%E6%8D%AE%E7%8A%B6%E6%80%81%E6%9B%B4%E6%96%B0%E6%97%B6%E7%9A%84%E5%B7%AE%E5%BC%82%20diff%20%E5%8F%8A%20patch%20%E6%9C%BA%E5%88%B6%E3%80%8B.js">数据状态更新时的差异 diff 及 patch 机制</a></p></li><li><p><a href="https://segmentfault.com/a/1190000008782928">解析vue2.0的diff算法</a></p></li><li><p><a href="https://www.cnblogs.com/wind-lanyan/p/9061684.html">详解vue的diff算法</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你真的了解Javascript执行顺序么？</title>
      <link href="/2018/07/17/ni-zhen-de-liao-jie-javascript-zhi-xing-shun-xu-me/"/>
      <url>/2018/07/17/ni-zhen-de-liao-jie-javascript-zhi-xing-shun-xu-me/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大家都知道，Javascript是单线程、顺序执行的，通过事件循环来处理异步。而且稍有开发经验的同学也知道，利用<code>setTimeout</code>、<code>setInterval</code>以及<code>Promise</code>可以延时代码的执行。如果在Node.js中，大家会用<code>process.nextTick</code>来让代码在下一个周期执行；或者在Vue中，会利用<code>Vue.nextTick</code>保证DOM全部更新完毕后再执行回调函数。但是，如果他们都放在一起呢？执行顺序又会是怎么样的？</p><h2 id="来个栗子"><a href="#来个栗子" class="headerlink" title="来个栗子"></a>来个栗子</h2><p>聪明的你知道下面代码的执行顺序么？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到这个问题，有经验的同学会脱口而出：太简单了，会输出如下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">script startscript endsetTimeout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为<code>setTimeout</code>会加入到队列，延时执行。的确没错。那我们再看看下面的例子呢？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>呃，这个问题好像难住了一部分同学，因为他们会有这样的想法：</p><blockquote><p><code>setTimeout</code>和<code>Promise</code>到底谁先执行呢？听说<code>Promise</code>是异步的，但是<code>setTimeout</code>也是异步的，而且延时为0， 这可怎么好？</p></blockquote><p>想不明白？没关系，先执行下看看结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">script startscript endpromise1promise2setTimeout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果是不是蛮有意思的？为啥<code>Promise</code>会先执行呢？我尝试着解释下，如果解释的不对，希望各位大牛多多指导。</p><p>大家知道，Javascript是基于事件循环(event loop)来处理事件的，用户的一些操作会放到事件队列里面，Javascript引擎会在合适的时候执行队列里面的操作。注意我们这里用到了“合适的时候“这个限定词，是因为Javascript单线程的，如果某段Javascript执行时间过长，那么它会阻塞主线程的执行。所以<code>setTimeout</code>也并不说是一定会精确的执行。</p><p>在Javascript引擎里面，队列还分为<code>Task</code>队列（也有人叫做<code>MacroTask</code>）和<code>MicroTask</code>队列，<code>MicroTask</code>会优先于<code>Task</code>执行。比如常见的点击事件、<code>setImmediate</code>、<code>setTimeout</code>、<code>MessageChannel</code>等会放入<code>Task</code>队列，但是<code>Promise</code>以及<code>MutationObserver</code>会放到<code>Microtask</code>队列。同时，Javascript引擎在执行<code>Microtask</code>队列的时候，如果期间又加入了新的<code>Microtask</code>，则该<code>Microtask</code>会加入到之前的<code>Microtask</code>队列的尾部，保证<code>Microtask</code>先于<code>Task</code>队列执行。</p><p>这样，大家就清楚了为啥<code>Promise</code>先执行吧，因为它是一个<code>Microtask</code>呀！优先级高，真是没办法 :-)。大家也许会问，优先级高，会高到什么程度呢？我们可以简单量度下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">checkDuration</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> setTimeoutDuration <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> promiseDuration <span class="token operator">=</span> <span class="token number">0</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        setTimeoutDuration <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start     <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        promiseDuration <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start     <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">setTimeout耗时: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>setTimeoutDuration<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Promise耗时: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>promiseDuration<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">checkDuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我在Chrome的console里面执行多次，会输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">setTimeout耗时: <span class="token number">1</span>Promise耗时: <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">setTimeout耗时: <span class="token number">4</span>Promise耗时: <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然，如果这个结果不是固定的，测试多次， <code>setTimeout</code>执行大慨在4ms左右，<code>Promise</code>大慨在1ms左右。哈哈，其实就快了3ms，前端同学为了争取这3ms真是不懈努力而且煞费苦心呀，不过真的为他们爱专研的态度点赞！！！</p><p>值得说明的是， Vue中<code>Vue.nextTick</code>也利用了该原理来保证在下次DOM更新循环结束之后执行延迟回调。如Vue 2.5.2里面就有这样的代码逻辑：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> microTimerFunc<span class="token punctuation">;</span><span class="token keyword">var</span> macroTimerFunc<span class="token punctuation">;</span><span class="token keyword">var</span> useMacroTask <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> setImmediate <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNative</span><span class="token punctuation">(</span>setImmediate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function-variable function">macroTimerFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setImmediate</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> MessageChannel <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>  <span class="token function">isNative</span><span class="token punctuation">(</span>MessageChannel<span class="token punctuation">)</span> <span class="token operator">||</span>  <span class="token comment">// PhantomJS</span>  MessageChannel<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object MessageChannelConstructor]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> port <span class="token operator">=</span> channel<span class="token punctuation">.</span>port2<span class="token punctuation">;</span>  channel<span class="token punctuation">.</span>port1<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> flushCallbacks<span class="token punctuation">;</span>  <span class="token function-variable function">macroTimerFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">/* istanbul ignore next */</span>  <span class="token function-variable function">macroTimerFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Determine MicroTask defer implementation.</span><span class="token comment">/* istanbul ignore next, $flow-disable-line */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Promise <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNative</span><span class="token punctuation">(</span>Promise<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function-variable function">microTimerFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// in problematic UIWebViews, Promise.then doesn't completely break, but</span>    <span class="token comment">// it can get stuck in a weird state where callbacks are pushed into the</span>    <span class="token comment">// microtask queue but the queue isn't being flushed, until the browser</span>    <span class="token comment">// needs to do some other work, e.g. handle a timer. Therefore we can</span>    <span class="token comment">// "force" the microtask queue to be flushed by adding an empty timer.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isIOS<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>noop<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">// fallback to macro</span>  microTimerFunc <span class="token operator">=</span> macroTimerFunc<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Vue，用<code>MacroTask</code>就是我们上文说的<code>Task</code>。可见执行的时机是:</p><p><code>Task(MacroTask)</code>队列中： <code>setImmediate</code> &gt; <code>MessageChannel</code> &gt; <code>setTimeout</code><br><code>MicroTask</code>队列中： 直接用了<code>Promise</code>，新版本中弃用了<code>MutationObserver</code>，因为其兼容性不好</p><p>扯了这么多，大家应该知道原因了吧？</p><h2 id="再来个样例"><a href="#再来个样例" class="headerlink" title="再来个样例"></a>再来个样例</h2><p>为了巩固大家对<code>MicroTask</code>的列举，我们再看一个例子</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取DOM</span><span class="token keyword">const</span> outer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.outer'</span><span class="token punctuation">)</span><span class="token keyword">const</span> inner <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.inner'</span><span class="token punctuation">)</span><span class="token comment">// 利用MuationObserver监听DOM的变化</span><span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mutate'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>outer<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 事件处理</span><span class="token keyword">const</span> <span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  outer<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'data-random'</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 事件绑定</span>inner<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> onClick<span class="token punctuation">)</span>outer<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> onClick<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们点击 inner区域， 输出内容为什么呢？ 如果你理解了上文的内容，就会知道输出结果为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clickpromisemutateclickpromisemutate<span class="token function">timeout</span><span class="token function">timeout</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好，今天就分享在这里。下篇文章，我们聊聊Node.js里面的事件。比如上文我们还没提到<code>setImmediate</code>呢？这个东西只在IE里面支持，但是在Node.js里面是支持的，而且Node.js里面还有一个<code>Process.nextTick</code>。下次我们再聊聊。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/">什么是微任务与宏任务</a></li><li><a href="https://www.jianshu.com/p/668fcef7374b">Vue.nextTick源码阅读</a></li><li><a href="https://www.zhihu.com/question/55364497">Vue 中如何使用 MutationObserver 做批量处理？</a></li><li><a href="https://cnodejs.org/topic/57d68794cb6f605d360105bf">Node.js Event Loop 的理解 Timers，process.nextTick()</a></li><li><a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#what-is-the-event-loop">what-is-the-event-loop</a></li><li><a href="https://www.zhihu.com/question/23028843">Process.nextTick 和 setImmediate 的区别？</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Node.js </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用OpenSSL创建自签名证书</title>
      <link href="/2018/07/10/li-yong-openssl-chuang-jian-zi-qian-ming-zheng-shu/"/>
      <url>/2018/07/10/li-yong-openssl-chuang-jian-zi-qian-ming-zheng-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="生成CA证书"><a href="#生成CA证书" class="headerlink" title="生成CA证书"></a>生成CA证书</h2><ol><li>创建CA证书私钥</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl genrsa <span class="token parameter variable">-out</span> ca-key.pem <span class="token parameter variable">-des</span> <span class="token number">1024</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>通过CA私钥生成CSR</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> ca-key.pem <span class="token parameter variable">-out</span> ca-csr.pem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>通过私钥和CSR生成CA证书</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-in</span> ca-csr.pem <span class="token parameter variable">-signkey</span> ca-key.pem <span class="token parameter variable">-out</span> ca-cert.pem <span class="token parameter variable">-days</span> <span class="token number">1095</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>检测CA证书是否正常</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl x509 <span class="token parameter variable">-in</span> ca-cert.pem <span class="token parameter variable">-noout</span> <span class="token parameter variable">-text</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建服务端或者客户端证书"><a href="#创建服务端或者客户端证书" class="headerlink" title="创建服务端或者客户端证书"></a>创建服务端或者客户端证书</h2><ol><li>创建私钥</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl genrsa <span class="token parameter variable">-out</span> server-key.pem <span class="token number">1024</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>根据私钥生成CSR</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> server-key.pem  <span class="token parameter variable">-out</span> server-csr.pem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>创建extfile, 文件内容如下：</li></ol><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">v3_req</span><span class="token punctuation">]</span></span>    <span class="token key attr-name">authorityKeyIdentifier</span><span class="token punctuation">=</span><span class="token value attr-value">keyid,issuer</span>    <span class="token key attr-name">basicConstraints</span><span class="token punctuation">=</span><span class="token value attr-value">CA:FALSE</span>    <span class="token key attr-name">keyUsage</span> <span class="token punctuation">=</span> <span class="token value attr-value">digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span>    <span class="token key attr-name">subjectAltName</span> <span class="token punctuation">=</span> <span class="token value attr-value">@alt_names</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">alt_names</span><span class="token punctuation">]</span></span><span class="token comment"># 注意这个IP.1的设置，IP地址需要和你的服务器的监听地址一样</span>    <span class="token key attr-name">DNS.1</span> <span class="token punctuation">=</span> <span class="token value attr-value">localhost</span>    <span class="token key attr-name">DNS.2</span> <span class="token punctuation">=</span> <span class="token value attr-value">127.0.0.1</span>    <span class="token key attr-name">DNS.3</span> <span class="token punctuation">=</span> <span class="token value attr-value">m.asyncoder.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意DNS.3为你的域名信息，保持和步骤2里面的Common Name一致</p></blockquote><ol start="3"><li>通过私钥和CSR生成自签名证书</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-CA</span> ca-cert.pem <span class="token parameter variable">-CAkey</span> ca-key.pem <span class="token parameter variable">-CAcreateserial</span> <span class="token parameter variable">-in</span> server-csr.pem <span class="token parameter variable">-out</span> server-cert.pem <span class="token parameter variable">-extensions</span> v3_req <span class="token parameter variable">-extfile</span> extfile <span class="token parameter variable">-days</span> <span class="token number">1095</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="证书打包"><a href="#证书打包" class="headerlink" title="证书打包"></a>证书打包</h2><p>一般服务器部署需要的SSL证书，我们直接用<code>server-cert.pem</code>和<code>server-key.pem</code>即可，但是在Node.js上为了开发方便，我们可以把证书进行合并。合并时，请记住输入的密码。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl pkcs12 <span class="token parameter variable">-export</span> <span class="token parameter variable">-in</span> server-cert.pem <span class="token parameter variable">-inkey</span> server-key.pem <span class="token parameter variable">-certfile</span> ca-cert.pem <span class="token parameter variable">-out</span> server.pfx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="导入证书到操作系统"><a href="#导入证书到操作系统" class="headerlink" title="导入证书到操作系统"></a>导入证书到操作系统</h2><ol><li><p>Windows上将<code>ca-cert.pem</code>改为<code>ca-cert.cer</code>, 点击导入到<code>受信任的根证书颁发机构</code>即可</p></li><li><p>Mac上直接安装<code>ca-cert.cer</code>即可</p></li></ol><h2 id="Node-js测试"><a href="#Node-js测试" class="headerlink" title="Node.js测试"></a>Node.js测试</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> https <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'https'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">pfx</span><span class="token operator">:</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./server.pfx'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token literal-property property">passphrase</span><span class="token operator">:</span><span class="token string">'your password'</span> <span class="token comment">// 生成server.pfx时需要的密码</span><span class="token punctuation">}</span><span class="token punctuation">;</span>https<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'hello world\n'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">443</span><span class="token punctuation">,</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用Chrome访问<a href="https://localhost/">https://localhost</a>, 可以看到左上角绿色的锁，页面显示为<code>hello world</code></p>]]></content>
      
      
      <categories>
          
          <category> 系统软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> OpenSSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack中的require.context妙用</title>
      <link href="/2018/07/08/webpack-zhong-de-require.context-miao-yong/"/>
      <url>/2018/07/08/webpack-zhong-de-require.context-miao-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="require-context简介"><a href="#require-context简介" class="headerlink" title="require.context简介"></a>require.context简介</h2><p><code>require.context</code>是Webpack中用来管理依赖的一个函数，它的参数如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> useSubdirectories <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> regExp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\.\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用方式如下所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建一个test文件夹（不包含子目录）的上下文，可以require其下的所有js文件</span><span class="token keyword">const</span> context <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">"./test"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">importAll</span> <span class="token operator">=</span> <span class="token parameter">context</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// context.keys() 返回找到的js文件路径</span>    context<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token function">context</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">importAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实践-—-自动注册Vue组件"><a href="#实践-—-自动注册Vue组件" class="headerlink" title="实践 —- 自动注册Vue组件"></a>实践 —- 自动注册Vue组件</h2><p>利用Vue开发时，我们常会抽离出一些组件并将其放到<code>components</code>文件夹，然后在Vue中进行引用，例如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>search-input</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>搜索<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>search-input</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dynamic-table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dynamic-table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> SearchInput <span class="token keyword">from</span> <span class="token string">'../components/SearchInput'</span><span class="token keyword">import</span> DynamicTable <span class="token keyword">from</span> <span class="token string">'../components/DynamicTable'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>        SearchInput<span class="token punctuation">,</span>        DynamicTable    <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一种很好的代码复用方式，但是如果要引入的组件比较多时，一个一个引用会比较头疼，有没有一劳永逸的方法呢？有的，<code>require.context</code>可以上场了。 为了方便使用，我们可以写一个Vue插件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// plugins/component.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> context <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">'../components'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>        context<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token function">context</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>default            Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span>name<span class="token punctuation">,</span> component<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// app.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> globalComponents <span class="token keyword">from</span> <span class="token string">'./plugins/components'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>globalComponents<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原理很简单，我们拿到组件后，通过<code>Vue.component</code>进行全局注册。这样注册后，我们可以在Vue中的template里面直接引入组件了。怎么样，是不是方便多啦？</p><h2 id="实践-—-简化Vuex开发"><a href="#实践-—-简化Vuex开发" class="headerlink" title="实践 —- 简化Vuex开发"></a>实践 —- 简化Vuex开发</h2><p>首先上一张Vuex的架构图<br><img src="https://raw.githubusercontent.com/vuejs/vuex/dev/docs/.vuepress/public/vuex.png"></p><p>从架构图上可以看到，我们开发时，会有 <code>action</code>、<code>muations</code>以及<code>store</code>三个部分，开发时，我们会将这三个部分进行拆开，会有如下的文件夹结构：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span>├── actions│   ├── index.js│   ├── overview.js│   └── settings.js├── mutations│   ├── index.js│   ├── overview.js│   └── settings.js└── store    └── index.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>actions</code>文件下的<code>index.js</code>用来引用其他js文件，例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// actions/index.js</span><span class="token keyword">import</span> overviewActions <span class="token keyword">from</span> <span class="token string">'./overview'</span><span class="token keyword">import</span> settingsActions <span class="token keyword">from</span> <span class="token string">'./settings'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>overviewActions    <span class="token operator">...</span>settingsActions<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>muations</code>文件下的<code>index.js</code>用来引用其他js文件，例如:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// muations/index.js</span><span class="token keyword">import</span> overview <span class="token keyword">from</span> <span class="token string">'./overview'</span><span class="token keyword">import</span> settings <span class="token keyword">from</span> <span class="token string">'./settings'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    overview<span class="token punctuation">,</span>    settings<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>store</code>文件夹下的<code>index.js</code>用来将<code>action</code>和<code>mutation</code>进行载入：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token keyword">import</span> actions <span class="token keyword">from</span> <span class="token string">"../actions"</span><span class="token keyword">import</span> mutations <span class="token keyword">from</span> <span class="token string">"../mutations"</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>devtools <span class="token operator">=</span> __DEV__<span class="token operator">!</span>__DEV__ <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">errorHandler</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> vm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vm<span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"hidePageLoading"</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    actions<span class="token punctuation">,</span>    <span class="token literal-property property">modules</span><span class="token operator">:</span> mutations<span class="token punctuation">,</span>    <span class="token literal-property property">strict</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样代码结构很清晰，但是大家是否意识到，每次我们增加一个模块，都需修改<code>actions</code>以及<code>mutations</code>下的<code>index.js</code>, 很烦有没有？git提交时偶尔还发生冲突，很不爽哇！怎么解决？<code>require.context</code>来帮忙~~</p><p>我们现在删除<code>actions</code>以及<code>mutations</code>下的<code>index.js</code>文件，然后修改<code>store/index.js</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">"vuex"</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>devtools <span class="token operator">=</span> __DEV__<span class="token operator">!</span>__DEV__ <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">errorHandler</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> vm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vm<span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"hidePageLoading"</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自动引入actions下的js文件，将文件的各个对象合并为一个大对象</span><span class="token keyword">const</span> actionContext <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">'../actions'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*\.js</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token keyword">const</span> actions <span class="token operator">=</span> actionContext    <span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>prev<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">actionContext</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">.</span>default <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 自动引入mutation文件下的js文件，以文件名字作为对象的key</span><span class="token keyword">const</span> mutationContext <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">'../mutations'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*\.js</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token keyword">const</span> modules <span class="token operator">=</span> mutationContext<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> key <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\w+)\.js</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    prev<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">mutationContext</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">.</span>default    <span class="token keyword">return</span> prev<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    actions<span class="token punctuation">,</span>    modules<span class="token punctuation">,</span>    <span class="token literal-property property">strict</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样处理后，我们以后增加一个模块，直接往<code>actions</code>和<code>muations</code>下直接加js文件就好了，大家互不干扰，快乐协作！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上是我开发中总结的一些小技巧，希望对大家有所帮助：-）</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
